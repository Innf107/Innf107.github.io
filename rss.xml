<rss version="2.0">
    <channel>
        <title>Prophetlabs</title>
        <description>My Blog</description>
        <link>https://prophetlabs.de</link>
        <pubDate>19-02-2024</pubDate>
        <lastBuildDate>19-02-2024</lastBuildDate>
        <ttl>60</ttl>
        <item>
    <title>Blazingly Fast™ Type Class Resolution with Tries</title>
    <link>https://prophetlabs.de/posts/classTries.html</link>
    <guid isPremaLink="true">https://prophetlabs.de/posts/classTries.html</guid>
    <pubDate>2024-02-19</pubDate>
    <description>&lt;p&gt;One of the more fundamental hurdles when implementing type classes is
instance resolution. A programmer might write any possible number of
instances for a given class, so how do we find the one we are looking
for?&lt;/p&gt;
&lt;p&gt;For the remaining examples, let’s assume that our program contains
the following instances&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;C&lt;/span&gt;(a)&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;C&lt;/span&gt;(&lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;C&lt;/span&gt;(&lt;span class="dt"&gt;List&lt;/span&gt;(&lt;span class="dt"&gt;Bool&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;C&lt;/span&gt;(&lt;span class="dt"&gt;List&lt;/span&gt;(&lt;span class="dt"&gt;String&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;C&lt;/span&gt;((a, &lt;span class="dt"&gt;Int&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;C&lt;/span&gt;((&lt;span class="dt"&gt;Bool&lt;/span&gt;, a))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, the easiest way to find an instance for a constraint, say
&lt;code&gt;C((String, Int))&lt;/code&gt;, is to linearly search through every
single instance until one matches the constraint arguments.&lt;/p&gt;
&lt;p&gt;For example, in this case, we would try (and fail) to match every
single instance until we hit &lt;code&gt;forall a. C((a, Int))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Somewhat surprisingly, this is actually the strategy GHC uses.&lt;a
href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; But with a large number of
instances, this is not exactly efficient and as it turns out, with a
little effort, we can do much better!&lt;/p&gt;
&lt;h2 id="we-need-to-trie-hardersorry"&gt;We need to trie harder&lt;a
href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you already know what tries are, the context in which you learned
about them was probably very different.&lt;/p&gt;
&lt;p&gt;The traditional use case for tries is matching sequences of text. The
prime example here is text auto-completion. Imagine that our set of
valid words consists of
&lt;code&gt;["dog", "cat", "car", "candle",  "dune", "can", "current", "dose", "bat", "category"]&lt;/code&gt;
and the user has typed in &lt;code&gt;"cat"&lt;/code&gt;. How do we find the set of
valid completions?&lt;/p&gt;
&lt;p&gt;Just like above, we could linearly walk through the set of valid
words and pick out all the ones that contain the prefix
&lt;code&gt;cat&lt;/code&gt;. For reasons that will become apparent soon, we can
visualize this flat set of all valid words as a flat tree.&lt;/p&gt;
&lt;div class="dot-output"&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Generated by graphviz version 9.0.0 (0)
 --&gt;

&lt;svg width="886pt" height="116pt" viewBox="0.00 0.00 885.53 116.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 112)"&gt;
&lt;g id="node1" class="node"&gt;
&lt;title&gt;
&lt;/title&gt;
&lt;ellipse fill="none"  cx="404.64" cy="-90" rx="27" ry="18"/&gt; &lt;/g&gt;
 &lt;g id="node2" class="node"&gt;
&lt;title&gt;
dog
&lt;/title&gt;
&lt;ellipse fill="none"  cx="29.64" cy="-18" rx="29.64" ry="18"/&gt;
&lt;text text-anchor="middle" x="29.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;dog&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge1" class="edge"&gt;
&lt;title&gt;
-&gt;dog
&lt;/title&gt;
&lt;path fill="none"  d="M377.56,-87.08C319.79,-82.47 180.61,-68.65 68.64,-36 66.79,-35.46 64.9,-34.85 63.02,-34.2"/&gt;
&lt;polygon   points="64.37,-30.97 53.78,-30.61 61.84,-37.49 64.37,-30.97"/&gt;
&lt;/g&gt;  &lt;g id="node3" class="node"&gt;
&lt;title&gt;
cat
&lt;/title&gt;
&lt;ellipse fill="none"  cx="104.64" cy="-18" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="104.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;cat&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge2" class="edge"&gt;
&lt;title&gt;
-&gt;cat
&lt;/title&gt;
&lt;path fill="none"  d="M377.86,-85.81C329.54,-79.59 224.96,-63.91 140.64,-36 139.08,-35.48 137.5,-34.92 135.92,-34.31"/&gt;
&lt;polygon   points="137.57,-31.21 127,-30.54 134.84,-37.66 137.57,-31.21"/&gt;
&lt;/g&gt;  &lt;g id="node4" class="node"&gt;
&lt;title&gt;
car
&lt;/title&gt;
&lt;ellipse fill="none"  cx="176.64" cy="-18" rx="27.01" ry="18"/&gt;
&lt;text text-anchor="middle" x="176.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;car&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge3" class="edge"&gt;
&lt;title&gt;
-&gt;car
&lt;/title&gt;
&lt;path fill="none"  d="M379.04,-83.41C341.81,-74.96 270.83,-57.59 212.64,-36 211.1,-35.43 209.54,-34.82 207.97,-34.18"/&gt;
&lt;polygon   points="209.65,-31.09 199.08,-30.29 206.84,-37.51 209.65,-31.09"/&gt;
&lt;/g&gt;  &lt;g id="node5" class="node"&gt;
&lt;title&gt;
candle
&lt;/title&gt;
&lt;ellipse fill="none"  cx="265.64" cy="-18" rx="43.84" ry="18"/&gt;
&lt;text text-anchor="middle" x="265.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;candle&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge4" class="edge"&gt;
&lt;title&gt;
-&gt;candle
&lt;/title&gt;
&lt;path fill="none"  d="M383.53,-78.37C362.17,-67.61 328.7,-50.76 302.87,-37.75"/&gt;
&lt;polygon   points="304.54,-34.67 294.04,-33.3 301.39,-40.93 304.54,-34.67"/&gt;
&lt;/g&gt;  &lt;g id="node6" class="node"&gt;
&lt;title&gt;
dune
&lt;/title&gt;
&lt;ellipse fill="none"  cx="363.64" cy="-18" rx="35.95" ry="18"/&gt;
&lt;text text-anchor="middle" x="363.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;dune&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge5" class="edge"&gt;
&lt;title&gt;
-&gt;dune
&lt;/title&gt;
&lt;path fill="none"  d="M395.13,-72.76C390.38,-64.67 384.53,-54.66 379.15,-45.49"/&gt;
&lt;polygon   points="382.22,-43.8 374.14,-36.94 376.18,-47.34 382.22,-43.8"/&gt;
&lt;/g&gt;  &lt;g id="node7" class="node"&gt;
&lt;title&gt;
can
&lt;/title&gt;
&lt;ellipse fill="none"  cx="446.64" cy="-18" rx="28.59" ry="18"/&gt;
&lt;text text-anchor="middle" x="446.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;can&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge6" class="edge"&gt;
&lt;title&gt;
-&gt;can
&lt;/title&gt;
&lt;path fill="none"  d="M414.38,-72.76C419.36,-64.46 425.55,-54.15 431.16,-44.79"/&gt;
&lt;polygon   points="434.03,-46.82 436.17,-36.45 428.02,-43.22 434.03,-46.82"/&gt;
&lt;/g&gt;  &lt;g id="node8" class="node"&gt;
&lt;title&gt;
current
&lt;/title&gt;
&lt;ellipse fill="none"  cx="541.64" cy="-18" rx="48.58" ry="18"/&gt;
&lt;text text-anchor="middle" x="541.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;current&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge7" class="edge"&gt;
&lt;title&gt;
-&gt;current
&lt;/title&gt;
&lt;path fill="none"  d="M425.74,-78.22C446.59,-67.56 478.92,-51.04 504.14,-38.16"/&gt;
&lt;polygon   points="505.46,-41.42 512.77,-33.75 502.27,-35.18 505.46,-41.42"/&gt;
&lt;/g&gt;  &lt;g id="node9" class="node"&gt;
&lt;title&gt;
dose
&lt;/title&gt;
&lt;ellipse fill="none"  cx="642.64" cy="-18" rx="34.37" ry="18"/&gt;
&lt;text text-anchor="middle" x="642.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;dose&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge8" class="edge"&gt;
&lt;title&gt;
-&gt;dose
&lt;/title&gt;
&lt;path fill="none"  d="M429.84,-83.1C467.25,-74.13 539.55,-55.98 599.64,-36 601.61,-35.34 603.62,-34.65 605.64,-33.93"/&gt;
&lt;polygon   points="606.87,-37.2 615.01,-30.43 604.42,-30.65 606.87,-37.2"/&gt;
&lt;/g&gt;  &lt;g id="node10" class="node"&gt;
&lt;title&gt;
bat
&lt;/title&gt;
&lt;ellipse fill="none"  cx="722.64" cy="-18" rx="27.53" ry="18"/&gt;
&lt;text text-anchor="middle" x="722.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;bat&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge9" class="edge"&gt;
&lt;title&gt;
-&gt;bat
&lt;/title&gt;
&lt;path fill="none"  d="M431.52,-86.15C482.17,-80.29 594.82,-64.95 685.64,-36 687.36,-35.45 689.11,-34.84 690.86,-34.19"/&gt;
&lt;polygon   points="692.17,-37.44 700.07,-30.38 689.49,-30.97 692.17,-37.44"/&gt;
&lt;/g&gt;  &lt;g id="node11" class="node"&gt;
&lt;title&gt;
category
&lt;/title&gt;
&lt;ellipse fill="none"  cx="822.64" cy="-18" rx="54.89" ry="18"/&gt;
&lt;text text-anchor="middle" x="822.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;category&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge10" class="edge"&gt;
&lt;title&gt;
-&gt;category
&lt;/title&gt;
&lt;path fill="none"  d="M431.1,-86.11C490.33,-79.41 637.94,-61.41 759.64,-36 763.47,-35.2 767.41,-34.31 771.37,-33.36"/&gt;
&lt;polygon   points="772.16,-36.77 781.01,-30.95 770.46,-29.98 772.16,-36.77"/&gt;
&lt;/g&gt; &lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;p&gt;This is obviously pretty inefficient. If you were to try and optimize
this, you might try the following: All words that contain the prefix
&lt;code&gt;cat&lt;/code&gt; start with a &lt;code&gt;c&lt;/code&gt;, so we can group our words
by their first character to immediately filter out all the ones that
don’t start with a &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With this optimization, our tree, now represented as a map from
characters to sets of words, looks like this.&lt;/p&gt;
&lt;div class="dot-output"&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Generated by graphviz version 9.0.0 (0)
 --&gt;

&lt;svg width="883pt" height="188pt" viewBox="0.00 0.00 883.17 188.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 184)"&gt;
&lt;g id="node1" class="node"&gt;
&lt;title&gt;
&lt;/title&gt;
&lt;ellipse fill="none"  cx="486.64" cy="-162" rx="27" ry="18"/&gt; &lt;/g&gt;
 &lt;g id="node2" class="node"&gt;
&lt;title&gt;
d
&lt;/title&gt;
&lt;ellipse fill="none"  cx="157.64" cy="-90" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="157.64" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;d&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge1" class="edge"&gt;
&lt;title&gt;
-&gt;d
&lt;/title&gt;
&lt;path fill="none"  d="M461.1,-155.57C403.15,-143.24 261.56,-113.11 194.29,-98.8"/&gt;
&lt;polygon   points="195.38,-95.45 184.87,-96.79 193.92,-102.3 195.38,-95.45"/&gt;
&lt;/g&gt;  &lt;g id="node3" class="node"&gt;
&lt;title&gt;
c
&lt;/title&gt;
&lt;ellipse fill="none"  cx="486.64" cy="-90" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="486.64" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;c&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge2" class="edge"&gt;
&lt;title&gt;
-&gt;c
&lt;/title&gt;
&lt;path fill="none"  d="M486.64,-143.7C486.64,-136.41 486.64,-127.73 486.64,-119.54"/&gt;
&lt;polygon   points="490.14,-119.62 486.64,-109.62 483.14,-119.62 490.14,-119.62"/&gt;
&lt;/g&gt;  &lt;g id="node4" class="node"&gt;
&lt;title&gt;
b
&lt;/title&gt;
&lt;ellipse fill="none"  cx="725.64" cy="-90" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="725.64" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;b&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge3" class="edge"&gt;
&lt;title&gt;
-&gt;b
&lt;/title&gt;
&lt;path fill="none"  d="M510.87,-153.9C553.28,-141.48 641.11,-115.76 690.3,-101.35"/&gt;
&lt;polygon   points="691.28,-104.71 699.89,-98.54 689.31,-97.99 691.28,-104.71"/&gt;
&lt;/g&gt;  &lt;g id="node5" class="node"&gt;
&lt;title&gt;
dog
&lt;/title&gt;
&lt;ellipse fill="none"  cx="29.64" cy="-18" rx="29.64" ry="18"/&gt;
&lt;text text-anchor="middle" x="29.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;dog&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge4" class="edge"&gt;
&lt;title&gt;
d-&gt;dog
&lt;/title&gt;
&lt;path fill="none"  d="M137.07,-77.75C116.51,-66.51 84.63,-49.07 60.93,-36.11"/&gt;
&lt;polygon   points="62.79,-33.14 52.33,-31.41 59.43,-39.28 62.79,-33.14"/&gt;
&lt;/g&gt;  &lt;g id="node9" class="node"&gt;
&lt;title&gt;
dune
&lt;/title&gt;
&lt;ellipse fill="none"  cx="113.64" cy="-18" rx="35.95" ry="18"/&gt;
&lt;text text-anchor="middle" x="113.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;dune&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge5" class="edge"&gt;
&lt;title&gt;
d-&gt;dune
&lt;/title&gt;
&lt;path fill="none"  d="M147.65,-73.12C142.44,-64.82 135.93,-54.46 130,-45.03"/&gt;
&lt;polygon   points="132.98,-43.19 124.69,-36.59 127.05,-46.92 132.98,-43.19"/&gt;
&lt;/g&gt;  &lt;g id="node12" class="node"&gt;
&lt;title&gt;
dose
&lt;/title&gt;
&lt;ellipse fill="none"  cx="201.64" cy="-18" rx="34.37" ry="18"/&gt;
&lt;text text-anchor="middle" x="201.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;dose&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge6" class="edge"&gt;
&lt;title&gt;
d-&gt;dose
&lt;/title&gt;
&lt;path fill="none"  d="M167.62,-73.12C172.84,-64.82 179.35,-54.46 185.27,-45.03"/&gt;
&lt;polygon   points="188.22,-46.92 190.58,-36.59 182.3,-43.19 188.22,-46.92"/&gt;
&lt;/g&gt;  &lt;g id="node6" class="node"&gt;
&lt;title&gt;
cat
&lt;/title&gt;
&lt;ellipse fill="none"  cx="280.64" cy="-18" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="280.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;cat&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge7" class="edge"&gt;
&lt;title&gt;
c-&gt;cat
&lt;/title&gt;
&lt;path fill="none"  d="M461.78,-82.42C428.32,-73.3 367.19,-55.71 316.64,-36 315.11,-35.4 313.55,-34.77 311.99,-34.12"/&gt;
&lt;polygon   points="313.69,-31.04 303.13,-30.18 310.85,-37.44 313.69,-31.04"/&gt;
&lt;/g&gt;  &lt;g id="node7" class="node"&gt;
&lt;title&gt;
car
&lt;/title&gt;
&lt;ellipse fill="none"  cx="352.64" cy="-18" rx="27.01" ry="18"/&gt;
&lt;text text-anchor="middle" x="352.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;car&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge8" class="edge"&gt;
&lt;title&gt;
c-&gt;car
&lt;/title&gt;
&lt;path fill="none"  d="M465.7,-78.06C443.67,-66.56 408.77,-48.32 383.57,-35.16"/&gt;
&lt;polygon   points="385.25,-32.09 374.77,-30.56 382.01,-38.29 385.25,-32.09"/&gt;
&lt;/g&gt;  &lt;g id="node8" class="node"&gt;
&lt;title&gt;
candle
&lt;/title&gt;
&lt;ellipse fill="none"  cx="441.64" cy="-18" rx="43.84" ry="18"/&gt;
&lt;text text-anchor="middle" x="441.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;candle&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge9" class="edge"&gt;
&lt;title&gt;
c-&gt;candle
&lt;/title&gt;
&lt;path fill="none"  d="M476.43,-73.12C471.17,-64.94 464.62,-54.76 458.63,-45.44"/&gt;
&lt;polygon   points="461.61,-43.59 453.25,-37.07 455.72,-47.37 461.61,-43.59"/&gt;
&lt;/g&gt;  &lt;g id="node10" class="node"&gt;
&lt;title&gt;
can
&lt;/title&gt;
&lt;ellipse fill="none"  cx="531.64" cy="-18" rx="28.59" ry="18"/&gt;
&lt;text text-anchor="middle" x="531.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;can&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge10" class="edge"&gt;
&lt;title&gt;
c-&gt;can
&lt;/title&gt;
&lt;path fill="none"  d="M496.85,-73.12C502.31,-64.61 509.18,-53.94 515.36,-44.32"/&gt;
&lt;polygon   points="518.18,-46.4 520.65,-36.09 512.3,-42.61 518.18,-46.4"/&gt;
&lt;/g&gt;  &lt;g id="node11" class="node"&gt;
&lt;title&gt;
current
&lt;/title&gt;
&lt;ellipse fill="none"  cx="626.64" cy="-18" rx="48.58" ry="18"/&gt;
&lt;text text-anchor="middle" x="626.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;current&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge11" class="edge"&gt;
&lt;title&gt;
c-&gt;current
&lt;/title&gt;
&lt;path fill="none"  d="M507.9,-78.37C529.15,-67.75 562.28,-51.18 588.15,-38.24"/&gt;
&lt;polygon   points="589.65,-41.41 597.03,-33.8 586.52,-35.14 589.65,-41.41"/&gt;
&lt;/g&gt;  &lt;g id="node14" class="node"&gt;
&lt;title&gt;
category
&lt;/title&gt;
&lt;ellipse fill="none"  cx="747.64" cy="-18" rx="54.89" ry="18"/&gt;
&lt;text text-anchor="middle" x="747.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;category&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge12" class="edge"&gt;
&lt;title&gt;
c-&gt;category
&lt;/title&gt;
&lt;path fill="none"  d="M511.65,-82.32C549.21,-72.29 622.44,-52.72 684.64,-36 688.14,-35.06 691.75,-34.09 695.39,-33.11"/&gt;
&lt;polygon   points="696.09,-36.54 704.84,-30.56 694.27,-29.78 696.09,-36.54"/&gt;
&lt;/g&gt;  &lt;g id="node13" class="node"&gt;
&lt;title&gt;
bat
&lt;/title&gt;
&lt;ellipse fill="none"  cx="847.64" cy="-18" rx="27.53" ry="18"/&gt;
&lt;text text-anchor="middle" x="847.64" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;bat&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge13" class="edge"&gt;
&lt;title&gt;
b-&gt;bat
&lt;/title&gt;
&lt;path fill="none"  d="M745.78,-77.44C765.3,-66.24 795.14,-49.12 817.48,-36.3"/&gt;
&lt;polygon   points="819.22,-39.34 826.15,-31.33 815.73,-33.27 819.22,-39.34"/&gt;
&lt;/g&gt; &lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;p&gt;Cool! This already cut the number of words we need to search through
roughly in half. To speed things up further, you might notice that
exactly the same argument applies to the second character, as well as
the third, fourth, and every one after that!&lt;/p&gt;
&lt;p&gt;So if we apply this optimization to &lt;em&gt;every&lt;/em&gt; character,
effectively unrolling the words into fancy interlinked lists of
characters, we end up with a &lt;strong&gt;trie&lt;/strong&gt;!&lt;/p&gt;
&lt;div class="dot-output"&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Generated by graphviz version 9.0.0 (0)
 --&gt;

&lt;svg width="566pt" height="620pt" viewBox="0.00 0.00 566.00 620.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 616)"&gt;
&lt;g id="node1" class="node"&gt;
&lt;title&gt;
&lt;/title&gt;
&lt;ellipse fill="none"  cx="369" cy="-594" rx="27" ry="18"/&gt; &lt;/g&gt;
 &lt;g id="node2" class="node"&gt;
&lt;title&gt;
d
&lt;/title&gt;
&lt;ellipse fill="none"  cx="171" cy="-522" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="171" y="-517.33" font-family="Times,serif" font-size="14.00"&gt;d&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge1" class="edge"&gt;
&lt;title&gt;
-&gt;d
&lt;/title&gt;
&lt;path fill="none"  d="M345.51,-584.7C310.75,-572.41 245.42,-549.31 205.3,-535.13"/&gt;
&lt;polygon   points="206.48,-531.83 195.89,-531.8 204.15,-538.43 206.48,-531.83"/&gt;
&lt;/g&gt;  &lt;g id="node3" class="node"&gt;
&lt;title&gt;
c
&lt;/title&gt;
&lt;ellipse fill="none"  cx="369" cy="-522" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="369" y="-517.33" font-family="Times,serif" font-size="14.00"&gt;c&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge2" class="edge"&gt;
&lt;title&gt;
-&gt;c
&lt;/title&gt;
&lt;path fill="none"  d="M369,-575.7C369,-568.41 369,-559.73 369,-551.54"/&gt;
&lt;polygon   points="372.5,-551.62 369,-541.62 365.5,-551.62 372.5,-551.62"/&gt;
&lt;/g&gt;  &lt;g id="node4" class="node"&gt;
&lt;title&gt;
b
&lt;/title&gt;
&lt;ellipse fill="none"  cx="481" cy="-522" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="481" y="-517.33" font-family="Times,serif" font-size="14.00"&gt;b&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge3" class="edge"&gt;
&lt;title&gt;
-&gt;b
&lt;/title&gt;
&lt;path fill="none"  d="M388.25,-580.97C405.8,-570 431.97,-553.64 452.04,-541.1"/&gt;
&lt;polygon   points="453.71,-544.18 460.34,-535.91 450,-538.24 453.71,-544.18"/&gt;
&lt;/g&gt;  &lt;g id="node5" class="node"&gt;
&lt;title&gt;
do
&lt;/title&gt;
&lt;ellipse fill="none"  cx="99" cy="-450" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="99" y="-445.32" font-family="Times,serif" font-size="14.00"&gt;o&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge4" class="edge"&gt;
&lt;title&gt;
d-&gt;do
&lt;/title&gt;
&lt;path fill="none"  d="M156.08,-506.5C146.23,-496.92 133.14,-484.19 121.97,-473.34"/&gt;
&lt;polygon   points="124.59,-471 114.98,-466.54 119.71,-476.02 124.59,-471"/&gt;
&lt;/g&gt;  &lt;g id="node9" class="node"&gt;
&lt;title&gt;
du
&lt;/title&gt;
&lt;ellipse fill="none"  cx="171" cy="-450" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="171" y="-445.32" font-family="Times,serif" font-size="14.00"&gt;u&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge8" class="edge"&gt;
&lt;title&gt;
d-&gt;du
&lt;/title&gt;
&lt;path fill="none"  d="M171,-503.7C171,-496.41 171,-487.73 171,-479.54"/&gt;
&lt;polygon   points="174.5,-479.62 171,-469.62 167.5,-479.62 174.5,-479.62"/&gt;
&lt;/g&gt;  &lt;g id="node12" class="node"&gt;
&lt;title&gt;
ca
&lt;/title&gt;
&lt;ellipse fill="none"  cx="324" cy="-450" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="324" y="-445.32" font-family="Times,serif" font-size="14.00"&gt;a&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge11" class="edge"&gt;
&lt;title&gt;
c-&gt;ca
&lt;/title&gt;
&lt;path fill="none"  d="M358.79,-505.12C353.32,-496.61 346.46,-485.94 340.28,-476.32"/&gt;
&lt;polygon   points="343.34,-474.61 334.99,-468.09 337.45,-478.4 343.34,-474.61"/&gt;
&lt;/g&gt;  &lt;g id="node24" class="node"&gt;
&lt;title&gt;
cu
&lt;/title&gt;
&lt;ellipse fill="none"  cx="414" cy="-450" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="414" y="-445.32" font-family="Times,serif" font-size="14.00"&gt;u&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge23" class="edge"&gt;
&lt;title&gt;
c-&gt;cu
&lt;/title&gt;
&lt;path fill="none"  d="M379.21,-505.12C384.68,-496.61 391.54,-485.94 397.72,-476.32"/&gt;
&lt;polygon   points="400.55,-478.4 403.01,-468.09 394.66,-474.61 400.55,-478.4"/&gt;
&lt;/g&gt;  &lt;g id="node30" class="node"&gt;
&lt;title&gt;
ba
&lt;/title&gt;
&lt;ellipse fill="none"  cx="522" cy="-450" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="522" y="-445.32" font-family="Times,serif" font-size="14.00"&gt;a&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge29" class="edge"&gt;
&lt;title&gt;
b-&gt;ba
&lt;/title&gt;
&lt;path fill="none"  d="M490.51,-504.76C495.37,-496.46 501.41,-486.15 506.89,-476.79"/&gt;
&lt;polygon   points="509.74,-478.85 511.78,-468.45 503.7,-475.31 509.74,-478.85"/&gt;
&lt;/g&gt;  &lt;g id="node6" class="node"&gt;
&lt;title&gt;
dog
&lt;/title&gt;
&lt;ellipse fill="none"  cx="27" cy="-378" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="27" y="-373.32" font-family="Times,serif" font-size="14.00"&gt;g&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge5" class="edge"&gt;
&lt;title&gt;
do-&gt;dog
&lt;/title&gt;
&lt;path fill="none"  d="M84.08,-434.5C74.23,-424.92 61.14,-412.19 49.97,-401.34"/&gt;
&lt;polygon   points="52.59,-399 42.98,-394.54 47.71,-404.02 52.59,-399"/&gt;
&lt;/g&gt;  &lt;g id="node7" class="node"&gt;
&lt;title&gt;
dos
&lt;/title&gt;
&lt;ellipse fill="none"  cx="99" cy="-378" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="99" y="-373.32" font-family="Times,serif" font-size="14.00"&gt;s&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge6" class="edge"&gt;
&lt;title&gt;
do-&gt;dos
&lt;/title&gt;
&lt;path fill="none"  d="M99,-431.7C99,-424.41 99,-415.73 99,-407.54"/&gt;
&lt;polygon   points="102.5,-407.62 99,-397.62 95.5,-407.62 102.5,-407.62"/&gt;
&lt;/g&gt;  &lt;g id="node8" class="node"&gt;
&lt;title&gt;
dose
&lt;/title&gt;
&lt;ellipse fill="none"  cx="99" cy="-306" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="99" y="-301.32" font-family="Times,serif" font-size="14.00"&gt;e&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge7" class="edge"&gt;
&lt;title&gt;
dos-&gt;dose
&lt;/title&gt;
&lt;path fill="none"  d="M99,-359.7C99,-352.41 99,-343.73 99,-335.54"/&gt;
&lt;polygon   points="102.5,-335.62 99,-325.62 95.5,-335.62 102.5,-335.62"/&gt;
&lt;/g&gt;  &lt;g id="node10" class="node"&gt;
&lt;title&gt;
dun
&lt;/title&gt;
&lt;ellipse fill="none"  cx="171" cy="-378" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="171" y="-373.32" font-family="Times,serif" font-size="14.00"&gt;n&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge9" class="edge"&gt;
&lt;title&gt;
du-&gt;dun
&lt;/title&gt;
&lt;path fill="none"  d="M171,-431.7C171,-424.41 171,-415.73 171,-407.54"/&gt;
&lt;polygon   points="174.5,-407.62 171,-397.62 167.5,-407.62 174.5,-407.62"/&gt;
&lt;/g&gt;  &lt;g id="node11" class="node"&gt;
&lt;title&gt;
dune
&lt;/title&gt;
&lt;ellipse fill="none"  cx="171" cy="-306" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="171" y="-301.32" font-family="Times,serif" font-size="14.00"&gt;e&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge10" class="edge"&gt;
&lt;title&gt;
dun-&gt;dune
&lt;/title&gt;
&lt;path fill="none"  d="M171,-359.7C171,-352.41 171,-343.73 171,-335.54"/&gt;
&lt;polygon   points="174.5,-335.62 171,-325.62 167.5,-335.62 174.5,-335.62"/&gt;
&lt;/g&gt;  &lt;g id="node13" class="node"&gt;
&lt;title&gt;
cat
&lt;/title&gt;
&lt;ellipse fill="none"  cx="243" cy="-378" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="243" y="-373.32" font-family="Times,serif" font-size="14.00"&gt;t&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge12" class="edge"&gt;
&lt;title&gt;
ca-&gt;cat
&lt;/title&gt;
&lt;path fill="none"  d="M308,-435.17C296.46,-425.2 280.67,-411.56 267.55,-400.21"/&gt;
&lt;polygon   points="269.97,-397.68 260.11,-393.79 265.39,-402.98 269.97,-397.68"/&gt;
&lt;/g&gt;  &lt;g id="node19" class="node"&gt;
&lt;title&gt;
car
&lt;/title&gt;
&lt;ellipse fill="none"  cx="315" cy="-378" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="315" y="-373.32" font-family="Times,serif" font-size="14.00"&gt;r&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge18" class="edge"&gt;
&lt;title&gt;
ca-&gt;car
&lt;/title&gt;
&lt;path fill="none"  d="M321.78,-431.7C320.83,-424.32 319.7,-415.52 318.63,-407.25"/&gt;
&lt;polygon   points="322.14,-407.08 317.39,-397.61 315.2,-407.97 322.14,-407.08"/&gt;
&lt;/g&gt;  &lt;g id="node20" class="node"&gt;
&lt;title&gt;
can
&lt;/title&gt;
&lt;ellipse fill="none"  cx="387" cy="-378" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="387" y="-373.32" font-family="Times,serif" font-size="14.00"&gt;n&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge19" class="edge"&gt;
&lt;title&gt;
ca-&gt;can
&lt;/title&gt;
&lt;path fill="none"  d="M337.36,-434.15C345.71,-424.87 356.65,-412.73 366.13,-402.19"/&gt;
&lt;polygon   points="368.56,-404.72 372.65,-394.95 363.35,-400.04 368.56,-404.72"/&gt;
&lt;/g&gt;  &lt;g id="node14" class="node"&gt;
&lt;title&gt;
cate
&lt;/title&gt;
&lt;ellipse fill="none"  cx="243" cy="-306" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="243" y="-301.32" font-family="Times,serif" font-size="14.00"&gt;e&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge13" class="edge"&gt;
&lt;title&gt;
cat-&gt;cate
&lt;/title&gt;
&lt;path fill="none"  d="M243,-359.7C243,-352.41 243,-343.73 243,-335.54"/&gt;
&lt;polygon   points="246.5,-335.62 243,-325.62 239.5,-335.62 246.5,-335.62"/&gt;
&lt;/g&gt;  &lt;g id="node15" class="node"&gt;
&lt;title&gt;
categ
&lt;/title&gt;
&lt;ellipse fill="none"  cx="243" cy="-234" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="243" y="-229.32" font-family="Times,serif" font-size="14.00"&gt;g&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge14" class="edge"&gt;
&lt;title&gt;
cate-&gt;categ
&lt;/title&gt;
&lt;path fill="none"  d="M243,-287.7C243,-280.41 243,-271.73 243,-263.54"/&gt;
&lt;polygon   points="246.5,-263.62 243,-253.62 239.5,-263.62 246.5,-263.62"/&gt;
&lt;/g&gt;  &lt;g id="node16" class="node"&gt;
&lt;title&gt;
catego
&lt;/title&gt;
&lt;ellipse fill="none"  cx="243" cy="-162" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="243" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;o&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge15" class="edge"&gt;
&lt;title&gt;
categ-&gt;catego
&lt;/title&gt;
&lt;path fill="none"  d="M243,-215.7C243,-208.41 243,-199.73 243,-191.54"/&gt;
&lt;polygon   points="246.5,-191.62 243,-181.62 239.5,-191.62 246.5,-191.62"/&gt;
&lt;/g&gt;  &lt;g id="node17" class="node"&gt;
&lt;title&gt;
categor
&lt;/title&gt;
&lt;ellipse fill="none"  cx="243" cy="-90" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="243" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;r&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge16" class="edge"&gt;
&lt;title&gt;
catego-&gt;categor
&lt;/title&gt;
&lt;path fill="none"  d="M243,-143.7C243,-136.41 243,-127.73 243,-119.54"/&gt;
&lt;polygon   points="246.5,-119.62 243,-109.62 239.5,-119.62 246.5,-119.62"/&gt;
&lt;/g&gt;  &lt;g id="node18" class="node"&gt;
&lt;title&gt;
category
&lt;/title&gt;
&lt;ellipse fill="none"  cx="243" cy="-18" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="243" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;y&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge17" class="edge"&gt;
&lt;title&gt;
categor-&gt;category
&lt;/title&gt;
&lt;path fill="none"  d="M243,-71.7C243,-64.41 243,-55.73 243,-47.54"/&gt;
&lt;polygon   points="246.5,-47.62 243,-37.62 239.5,-47.62 246.5,-47.62"/&gt;
&lt;/g&gt;  &lt;g id="node21" class="node"&gt;
&lt;title&gt;
cand
&lt;/title&gt;
&lt;ellipse fill="none"  cx="387" cy="-306" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="387" y="-301.32" font-family="Times,serif" font-size="14.00"&gt;d&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge20" class="edge"&gt;
&lt;title&gt;
can-&gt;cand
&lt;/title&gt;
&lt;path fill="none"  d="M387,-359.7C387,-352.41 387,-343.73 387,-335.54"/&gt;
&lt;polygon   points="390.5,-335.62 387,-325.62 383.5,-335.62 390.5,-335.62"/&gt;
&lt;/g&gt;  &lt;g id="node22" class="node"&gt;
&lt;title&gt;
candl
&lt;/title&gt;
&lt;ellipse fill="none"  cx="387" cy="-234" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="387" y="-229.32" font-family="Times,serif" font-size="14.00"&gt;l&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge21" class="edge"&gt;
&lt;title&gt;
cand-&gt;candl
&lt;/title&gt;
&lt;path fill="none"  d="M387,-287.7C387,-280.41 387,-271.73 387,-263.54"/&gt;
&lt;polygon   points="390.5,-263.62 387,-253.62 383.5,-263.62 390.5,-263.62"/&gt;
&lt;/g&gt;  &lt;g id="node23" class="node"&gt;
&lt;title&gt;
candle
&lt;/title&gt;
&lt;ellipse fill="none"  cx="387" cy="-162" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="387" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;e&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge22" class="edge"&gt;
&lt;title&gt;
candl-&gt;candle
&lt;/title&gt;
&lt;path fill="none"  d="M387,-215.7C387,-208.41 387,-199.73 387,-191.54"/&gt;
&lt;polygon   points="390.5,-191.62 387,-181.62 383.5,-191.62 390.5,-191.62"/&gt;
&lt;/g&gt;  &lt;g id="node25" class="node"&gt;
&lt;title&gt;
cur
&lt;/title&gt;
&lt;ellipse fill="none"  cx="459" cy="-378" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="459" y="-373.32" font-family="Times,serif" font-size="14.00"&gt;r&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge24" class="edge"&gt;
&lt;title&gt;
cu-&gt;cur
&lt;/title&gt;
&lt;path fill="none"  d="M424.21,-433.12C429.68,-424.61 436.54,-413.94 442.72,-404.32"/&gt;
&lt;polygon   points="445.55,-406.4 448.01,-396.09 439.66,-402.61 445.55,-406.4"/&gt;
&lt;/g&gt;  &lt;g id="node26" class="node"&gt;
&lt;title&gt;
curr
&lt;/title&gt;
&lt;ellipse fill="none"  cx="459" cy="-306" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="459" y="-301.32" font-family="Times,serif" font-size="14.00"&gt;r&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge25" class="edge"&gt;
&lt;title&gt;
cur-&gt;curr
&lt;/title&gt;
&lt;path fill="none"  d="M459,-359.7C459,-352.41 459,-343.73 459,-335.54"/&gt;
&lt;polygon   points="462.5,-335.62 459,-325.62 455.5,-335.62 462.5,-335.62"/&gt;
&lt;/g&gt;  &lt;g id="node27" class="node"&gt;
&lt;title&gt;
curre
&lt;/title&gt;
&lt;ellipse fill="none"  cx="459" cy="-234" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="459" y="-229.32" font-family="Times,serif" font-size="14.00"&gt;e&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge26" class="edge"&gt;
&lt;title&gt;
curr-&gt;curre
&lt;/title&gt;
&lt;path fill="none"  d="M459,-287.7C459,-280.41 459,-271.73 459,-263.54"/&gt;
&lt;polygon   points="462.5,-263.62 459,-253.62 455.5,-263.62 462.5,-263.62"/&gt;
&lt;/g&gt;  &lt;g id="node28" class="node"&gt;
&lt;title&gt;
curren
&lt;/title&gt;
&lt;ellipse fill="none"  cx="459" cy="-162" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="459" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;n&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge27" class="edge"&gt;
&lt;title&gt;
curre-&gt;curren
&lt;/title&gt;
&lt;path fill="none"  d="M459,-215.7C459,-208.41 459,-199.73 459,-191.54"/&gt;
&lt;polygon   points="462.5,-191.62 459,-181.62 455.5,-191.62 462.5,-191.62"/&gt;
&lt;/g&gt;  &lt;g id="node29" class="node"&gt;
&lt;title&gt;
current
&lt;/title&gt;
&lt;ellipse fill="none"  cx="459" cy="-90" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="459" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;t&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge28" class="edge"&gt;
&lt;title&gt;
curren-&gt;current
&lt;/title&gt;
&lt;path fill="none"  d="M459,-143.7C459,-136.41 459,-127.73 459,-119.54"/&gt;
&lt;polygon   points="462.5,-119.62 459,-109.62 455.5,-119.62 462.5,-119.62"/&gt;
&lt;/g&gt;  &lt;g id="node31" class="node"&gt;
&lt;title&gt;
bat
&lt;/title&gt;
&lt;ellipse fill="none"  cx="531" cy="-378" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="531" y="-373.32" font-family="Times,serif" font-size="14.00"&gt;t&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge30" class="edge"&gt;
&lt;title&gt;
ba-&gt;bat
&lt;/title&gt;
&lt;path fill="none"  d="M524.22,-431.7C525.17,-424.32 526.3,-415.52 527.37,-407.25"/&gt;
&lt;polygon   points="530.8,-407.97 528.61,-397.61 523.86,-407.08 530.8,-407.97"/&gt;
&lt;/g&gt; &lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;p&gt;Now, instead of being linear in the number of words times their
length, our search is only linear in the size of the prefix we are
looking for. In practice, where words tend to share prefixes, this turns
out to be &lt;em&gt;much&lt;/em&gt; more efficient!&lt;/p&gt;
&lt;h2 id="back-to-the-world-of-types"&gt;Back to the world of types&lt;/h2&gt;
&lt;p&gt;So, how can we use tries for type classes? Well, first of all, we
need a way to unroll our complicated nested types into a linear string
of atomic units that play a similar role to the characters in our word
trie.&lt;/p&gt;
&lt;p&gt;For most types, this will be pretty straightforward. We can unroll
each of them into a linear string of &lt;em&gt;head constructors&lt;/em&gt;. You can
view this transformation as a depth-first search on our type that
separates every type constructor from its arguments in every step. For
example, &lt;code&gt;Either(List(String), Array((Int, Bool)))&lt;/code&gt; will be
unrolled into
&lt;code&gt;Either(_, _) -&gt; List(_) -&gt; String -&gt; Array(_) -&gt; (_, _) -&gt; Int -&gt; Bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can now already construct a trie to hold our instances from
above.&lt;/p&gt;
&lt;div class="dot-output"&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Generated by graphviz version 9.0.0 (0)
 --&gt;

&lt;svg width="341pt" height="260pt" viewBox="0.00 0.00 340.64 260.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 256)"&gt;
 &lt;g id="node1" class="node"&gt;
&lt;title&gt;
C
&lt;/title&gt;
&lt;ellipse fill="none"  cx="124.32" cy="-234" rx="30.69" ry="18"/&gt;
&lt;text text-anchor="middle" x="124.32" y="-229.32" font-family="Times,serif" font-size="14.00"&gt;C(_)&lt;/text&gt;
&lt;/g&gt;  &lt;g id="node2" class="node"&gt;
&lt;title&gt;
Int
&lt;/title&gt;
&lt;ellipse fill="none"  cx="37.32" cy="-162" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="37.32" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;Int&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge1" class="edge"&gt;
&lt;title&gt;
C-&gt;Int
&lt;/title&gt;
&lt;path fill="none"  d="M106.71,-218.83C94.09,-208.68 76.89,-194.83 62.77,-183.47"/&gt;
&lt;polygon   points="65.18,-180.92 55.19,-177.38 60.79,-186.38 65.18,-180.92"/&gt;
&lt;/g&gt;  &lt;g id="node3" class="node"&gt;
&lt;title&gt;
List(_)
&lt;/title&gt;
&lt;ellipse fill="none"  cx="124.32" cy="-162" rx="42.26" ry="18"/&gt;
&lt;text text-anchor="middle" x="124.32" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;List(_)&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge2" class="edge"&gt;
&lt;title&gt;
C-&gt;List(_)
&lt;/title&gt;
&lt;path fill="none"  d="M124.32,-215.7C124.32,-208.41 124.32,-199.73 124.32,-191.54"/&gt;
&lt;polygon   points="127.82,-191.62 124.32,-181.62 120.82,-191.62 127.82,-191.62"/&gt;
&lt;/g&gt;  &lt;g id="node6" class="node"&gt;
&lt;title&gt;
(\&lt;em&gt;, \&lt;/em&gt;)
&lt;/title&gt;
&lt;ellipse fill="none"  cx="225.32" cy="-162" rx="40.69" ry="18"/&gt;
&lt;text text-anchor="middle" x="225.32" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;(_,
_)&lt;/text&gt; &lt;/g&gt;  &lt;g id="edge5" class="edge"&gt;
&lt;title&gt;
C-&gt;(\&lt;em&gt;, \&lt;/em&gt;)
&lt;/title&gt;
&lt;path fill="none"  d="M143.32,-219.83C157.74,-209.84 177.88,-195.88 194.59,-184.3"/&gt;
&lt;polygon   points="196.49,-187.24 202.72,-178.67 192.5,-181.49 196.49,-187.24"/&gt;
&lt;/g&gt;  &lt;g id="node4" class="node"&gt;
&lt;title&gt;
Bool
&lt;/title&gt;
&lt;ellipse fill="none"  cx="33.32" cy="-90" rx="33.32" ry="18"/&gt;
&lt;text text-anchor="middle" x="33.32" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;Bool&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge3" class="edge"&gt;
&lt;title&gt;
List(_)-&gt;Bool
&lt;/title&gt;
&lt;path fill="none"  d="M104.57,-145.81C91.71,-135.92 74.75,-122.87 60.61,-111.99"/&gt;
&lt;polygon   points="63.05,-109.45 52.99,-106.13 58.78,-115 63.05,-109.45"/&gt;
&lt;/g&gt;  &lt;g id="node5" class="node"&gt;
&lt;title&gt;
String
&lt;/title&gt;
&lt;ellipse fill="none"  cx="127.32" cy="-90" rx="42.79" ry="18"/&gt;
&lt;text text-anchor="middle" x="127.32" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;String&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge4" class="edge"&gt;
&lt;title&gt;
List(_)-&gt;String
&lt;/title&gt;
&lt;path fill="none"  d="M125.06,-143.7C125.37,-136.41 125.75,-127.73 126.1,-119.54"/&gt;
&lt;polygon   points="129.59,-119.76 126.52,-109.62 122.6,-119.46 129.59,-119.76"/&gt;
&lt;/g&gt;  &lt;g id="node7" class="node"&gt;
&lt;title&gt;
a
&lt;/title&gt;
&lt;ellipse fill="none"  cx="221.32" cy="-90" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="221.32" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;a&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge6" class="edge"&gt;
&lt;title&gt;
(\&lt;em&gt;, \&lt;/em&gt;)-&gt;a
&lt;/title&gt;
&lt;path fill="none"  d="M224.33,-143.7C223.91,-136.41 223.42,-127.73 222.95,-119.54"/&gt;
&lt;polygon   points="226.45,-119.4 222.38,-109.62 219.46,-119.8 226.45,-119.4"/&gt;
&lt;/g&gt;  &lt;g id="node9" class="node"&gt;
&lt;title&gt;
Bool2
&lt;/title&gt;
&lt;ellipse fill="none"  cx="299.32" cy="-90" rx="33.32" ry="18"/&gt;
&lt;text text-anchor="middle" x="299.32" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;Bool&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge8" class="edge"&gt;
&lt;title&gt;
(\&lt;em&gt;, \&lt;/em&gt;)-&gt;Bool2
&lt;/title&gt;
&lt;path fill="none"  d="M242.11,-145.12C251.94,-135.82 264.5,-123.93 275.36,-113.67"/&gt;
&lt;polygon   points="277.65,-116.32 282.51,-106.9 272.84,-111.23 277.65,-116.32"/&gt;
&lt;/g&gt;  &lt;g id="node8" class="node"&gt;
&lt;title&gt;
Int2
&lt;/title&gt;
&lt;ellipse fill="none"  cx="221.32" cy="-18" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="221.32" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;Int&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge7" class="edge"&gt;
&lt;title&gt;
a-&gt;Int2
&lt;/title&gt;
&lt;path fill="none"  d="M221.32,-71.7C221.32,-64.41 221.32,-55.73 221.32,-47.54"/&gt;
&lt;polygon   points="224.82,-47.62 221.32,-37.62 217.82,-47.62 224.82,-47.62"/&gt;
&lt;/g&gt;  &lt;g id="node10" class="node"&gt;
&lt;title&gt;
a2
&lt;/title&gt;
&lt;ellipse fill="none"  cx="299.32" cy="-18" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="299.32" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;a&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge9" class="edge"&gt;
&lt;title&gt;
Bool2-&gt;a2
&lt;/title&gt;
&lt;path fill="none"  d="M299.32,-71.7C299.32,-64.41 299.32,-55.73 299.32,-47.54"/&gt;
&lt;polygon   points="302.82,-47.62 299.32,-37.62 295.82,-47.62 302.82,-47.62"/&gt;
&lt;/g&gt; &lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;p&gt;You might even think that we could resolve instances by simply
searching through the trie just like we did in our text prediction
example above, but it’s not quite that simple.&lt;/p&gt;
&lt;h2 id="universally-quantified-complications"&gt;Universally quantified
complications&lt;/h2&gt;
&lt;p&gt;The issue is that some instances can contain universally quantified
type variables! In our case, we have two such instances:
&lt;code&gt;forall a. C(a, Int)&lt;/code&gt; and
&lt;code&gt;forall a. C(Bool, a)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Trying to resolve, say &lt;code&gt;C(Bool, Int)&lt;/code&gt;, needs to try both
instances and report an ambiguity error since both of them match.&lt;/p&gt;
&lt;p&gt;More generally, at every inner node in our trie, there are either 0,
1, or 2 matching subtries that we need to check.&lt;/p&gt;
&lt;p&gt;For example, looking up this instance in the trie above would
traverse all of the red nodes.&lt;/p&gt;
&lt;div class="dot-output"&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Generated by graphviz version 9.0.0 (0)
 --&gt;

&lt;svg width="341pt" height="260pt" viewBox="0.00 0.00 340.64 260.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 256)"&gt;
 &lt;g id="node1" class="node"&gt;
&lt;title&gt;
C
&lt;/title&gt;
&lt;ellipse fill="none" stroke="red" cx="124.32" cy="-234" rx="30.69" ry="18"/&gt;
&lt;text text-anchor="middle" x="124.32" y="-229.32" font-family="Times,serif" font-size="14.00"&gt;C(_)&lt;/text&gt;
&lt;/g&gt;  &lt;g id="node2" class="node"&gt;
&lt;title&gt;
Int
&lt;/title&gt;
&lt;ellipse fill="none"  cx="37.32" cy="-162" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="37.32" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;Int&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge1" class="edge"&gt;
&lt;title&gt;
C-&gt;Int
&lt;/title&gt;
&lt;path fill="none"  d="M106.71,-218.83C94.09,-208.68 76.89,-194.83 62.77,-183.47"/&gt;
&lt;polygon   points="65.18,-180.92 55.19,-177.38 60.79,-186.38 65.18,-180.92"/&gt;
&lt;/g&gt;  &lt;g id="node3" class="node"&gt;
&lt;title&gt;
List(_)
&lt;/title&gt;
&lt;ellipse fill="none"  cx="124.32" cy="-162" rx="42.26" ry="18"/&gt;
&lt;text text-anchor="middle" x="124.32" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;List(_)&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge2" class="edge"&gt;
&lt;title&gt;
C-&gt;List(_)
&lt;/title&gt;
&lt;path fill="none"  d="M124.32,-215.7C124.32,-208.41 124.32,-199.73 124.32,-191.54"/&gt;
&lt;polygon   points="127.82,-191.62 124.32,-181.62 120.82,-191.62 127.82,-191.62"/&gt;
&lt;/g&gt;  &lt;g id="node6" class="node"&gt;
&lt;title&gt;
(\&lt;em&gt;, \&lt;/em&gt;)
&lt;/title&gt;
&lt;ellipse fill="none" stroke="red" cx="225.32" cy="-162" rx="40.69" ry="18"/&gt;
&lt;text text-anchor="middle" x="225.32" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;(_,
_)&lt;/text&gt; &lt;/g&gt;  &lt;g id="edge5" class="edge"&gt;
&lt;title&gt;
C-&gt;(\&lt;em&gt;, \&lt;/em&gt;)
&lt;/title&gt;
&lt;path fill="none" stroke="red" d="M143.32,-219.83C157.74,-209.84 177.88,-195.88 194.59,-184.3"/&gt;
&lt;polygon fill="red" stroke="red" points="196.49,-187.24 202.72,-178.67 192.5,-181.49 196.49,-187.24"/&gt;
&lt;/g&gt;  &lt;g id="node4" class="node"&gt;
&lt;title&gt;
Bool
&lt;/title&gt;
&lt;ellipse fill="none"  cx="33.32" cy="-90" rx="33.32" ry="18"/&gt;
&lt;text text-anchor="middle" x="33.32" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;Bool&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge3" class="edge"&gt;
&lt;title&gt;
List(_)-&gt;Bool
&lt;/title&gt;
&lt;path fill="none"  d="M104.57,-145.81C91.71,-135.92 74.75,-122.87 60.61,-111.99"/&gt;
&lt;polygon   points="63.05,-109.45 52.99,-106.13 58.78,-115 63.05,-109.45"/&gt;
&lt;/g&gt;  &lt;g id="node5" class="node"&gt;
&lt;title&gt;
String
&lt;/title&gt;
&lt;ellipse fill="none"  cx="127.32" cy="-90" rx="42.79" ry="18"/&gt;
&lt;text text-anchor="middle" x="127.32" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;String&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge4" class="edge"&gt;
&lt;title&gt;
List(_)-&gt;String
&lt;/title&gt;
&lt;path fill="none"  d="M125.06,-143.7C125.37,-136.41 125.75,-127.73 126.1,-119.54"/&gt;
&lt;polygon   points="129.59,-119.76 126.52,-109.62 122.6,-119.46 129.59,-119.76"/&gt;
&lt;/g&gt;  &lt;g id="node7" class="node"&gt;
&lt;title&gt;
a
&lt;/title&gt;
&lt;ellipse fill="none" stroke="red" cx="221.32" cy="-90" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="221.32" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;a&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge6" class="edge"&gt;
&lt;title&gt;
(\&lt;em&gt;, \&lt;/em&gt;)-&gt;a
&lt;/title&gt;
&lt;path fill="none" stroke="red" d="M224.33,-143.7C223.91,-136.41 223.42,-127.73 222.95,-119.54"/&gt;
&lt;polygon fill="red" stroke="red" points="226.45,-119.4 222.38,-109.62 219.46,-119.8 226.45,-119.4"/&gt;
&lt;/g&gt;  &lt;g id="node9" class="node"&gt;
&lt;title&gt;
Bool2
&lt;/title&gt;
&lt;ellipse fill="none" stroke="red" cx="299.32" cy="-90" rx="33.32" ry="18"/&gt;
&lt;text text-anchor="middle" x="299.32" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;Bool&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge8" class="edge"&gt;
&lt;title&gt;
(\&lt;em&gt;, \&lt;/em&gt;)-&gt;Bool2
&lt;/title&gt;
&lt;path fill="none" stroke="red" d="M242.11,-145.12C251.94,-135.82 264.5,-123.93 275.36,-113.67"/&gt;
&lt;polygon fill="red" stroke="red" points="277.65,-116.32 282.51,-106.9 272.84,-111.23 277.65,-116.32"/&gt;
&lt;/g&gt;  &lt;g id="node8" class="node"&gt;
&lt;title&gt;
Int2
&lt;/title&gt;
&lt;ellipse fill="none" stroke="red" cx="221.32" cy="-18" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="221.32" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;Int&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge7" class="edge"&gt;
&lt;title&gt;
a-&gt;Int2
&lt;/title&gt;
&lt;path fill="none" stroke="red" d="M221.32,-71.7C221.32,-64.41 221.32,-55.73 221.32,-47.54"/&gt;
&lt;polygon fill="red" stroke="red" points="224.82,-47.62 221.32,-37.62 217.82,-47.62 224.82,-47.62"/&gt;
&lt;/g&gt;  &lt;g id="node10" class="node"&gt;
&lt;title&gt;
a2
&lt;/title&gt;
&lt;ellipse fill="none" stroke="red" cx="299.32" cy="-18" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="299.32" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;a&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge9" class="edge"&gt;
&lt;title&gt;
Bool2-&gt;a2
&lt;/title&gt;
&lt;path fill="none" stroke="red" d="M299.32,-71.7C299.32,-64.41 299.32,-55.73 299.32,-47.54"/&gt;
&lt;polygon fill="red" stroke="red" points="302.82,-47.62 299.32,-37.62 295.82,-47.62 302.82,-47.62"/&gt;
&lt;/g&gt; &lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;p&gt;This might sound like it could lead to exponential blow-up, but it
actually doesn’t! In the absolute worst case, instance lookup needs to
traverse every path through our trie, but that is exactly equivalent to
what our naive linear search strategy did so it’s at least definitely
not slower than that.&lt;/p&gt;
&lt;p&gt;Okay, so we traverse every possible path through our trie that
matches the types we are looking for. Is that it?&lt;/p&gt;
&lt;p&gt;Not quite. Consider that variables might be used more than once in an
instance. For example, given an instance
&lt;code&gt;forall a. C((a, a))&lt;/code&gt;, we need to check that the two
arguments to the tuple correspond to the same type.&lt;/p&gt;
&lt;p&gt;To achieve this, we need to remember the first type we match a
variable against along a given path. If we come across this variable
again, we &lt;em&gt;patch&lt;/em&gt; the trie by inserting the (unrolled) type where
the variable would be.&lt;/p&gt;
&lt;p&gt;For example, say we have a trie with an instance for
&lt;code&gt;forall a. C((a, (a, Bool)))&lt;/code&gt;. Now, matching this trie
against &lt;code&gt;C((List(Int), (List(Int), Bool)))&lt;/code&gt; follows this
path. Once the traversal comes across the second occurrence of
&lt;code&gt;a&lt;/code&gt;, it locally patches the trie by replacing &lt;code&gt;a&lt;/code&gt;
with the blue path.&lt;/p&gt;
&lt;style&gt;
.replaced {
    stroke: var(--gray);
    fill: var(--gray);
}
&lt;/style&gt;
&lt;div class="dot-output"&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Generated by graphviz version 9.0.0 (0)
 --&gt;

&lt;svg width="565pt" height="476pt" viewBox="0.00 0.00 564.84 476.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 472)"&gt;
 &lt;g id="node1" class="node"&gt;
&lt;title&gt;
C((List(Int), (List(Int), Bool)))
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="156.43" cy="-450" rx="156.43" ry="18"/&gt;
&lt;text text-anchor="middle" x="156.43" y="-445.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;C((List(Int),
(List(Int), Bool)))&lt;/text&gt; &lt;/g&gt; 
&lt;g id="node2" class="node"&gt;
&lt;title&gt;
(List(Int), (List(Int), Bool))
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="156.43" cy="-378" rx="141.7" ry="18"/&gt;
&lt;text text-anchor="middle" x="156.43" y="-373.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;(List(Int),
(List(Int), Bool))&lt;/text&gt; &lt;/g&gt;

&lt;g id="edge1" class="edge"&gt;
&lt;title&gt;
C((List(Int), (List(Int), Bool)))-&gt;(List(Int), (List(Int), Bool))
&lt;/title&gt;
&lt;path fill="none" stroke="none" d="M156.43,-431.7C156.43,-424.41 156.43,-415.73 156.43,-407.54"/&gt;
&lt;polygon fill="none" stroke="none" points="159.93,-407.62 156.43,-397.62 152.93,-407.62 159.93,-407.62"/&gt;
&lt;/g&gt;  &lt;g id="node3" class="node"&gt;
&lt;title&gt;
List(Int) | (List(Int), Bool)
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="156.43" cy="-306" rx="137.49" ry="18"/&gt;
&lt;text text-anchor="middle" x="156.43" y="-301.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;List(Int)
| (List(Int), Bool)&lt;/text&gt; &lt;/g&gt;

&lt;g id="edge2" class="edge"&gt;
&lt;title&gt;
(List(Int), (List(Int), Bool))-&gt;List(Int) | (List(Int), Bool)
&lt;/title&gt;
&lt;path fill="none" stroke="none" d="M156.43,-359.7C156.43,-352.41 156.43,-343.73 156.43,-335.54"/&gt;
&lt;polygon fill="none" stroke="none" points="159.93,-335.62 156.43,-325.62 152.93,-335.62 159.93,-335.62"/&gt;
&lt;/g&gt;  &lt;g id="node4" class="node"&gt;
&lt;title&gt;
(List(Int), Bool)
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="156.43" cy="-234" rx="87.51" ry="18"/&gt;
&lt;text text-anchor="middle" x="156.43" y="-229.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;(List(Int),
Bool)&lt;/text&gt; &lt;/g&gt;

&lt;g id="edge3" class="edge"&gt;
&lt;title&gt;
List(Int) | (List(Int), Bool)-&gt;(List(Int), Bool)
&lt;/title&gt;
&lt;path fill="none" stroke="none" d="M156.43,-287.7C156.43,-280.41 156.43,-271.73 156.43,-263.54"/&gt;
&lt;polygon fill="none" stroke="none" points="159.93,-263.62 156.43,-253.62 152.93,-263.62 159.93,-263.62"/&gt;
&lt;/g&gt;  &lt;g id="node5" class="node"&gt;
&lt;title&gt;
List(Int) | Bool
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="156.43" cy="-162" rx="83.3" ry="18"/&gt;
&lt;text text-anchor="middle" x="156.43" y="-157.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;List(Int)
| Bool&lt;/text&gt; &lt;/g&gt; 
&lt;g id="edge4" class="edge"&gt;
&lt;title&gt;
(List(Int), Bool)-&gt;List(Int) | Bool
&lt;/title&gt;
&lt;path fill="none" stroke="none" d="M156.43,-215.7C156.43,-208.41 156.43,-199.73 156.43,-191.54"/&gt;
&lt;polygon fill="none" stroke="none" points="159.93,-191.62 156.43,-181.62 152.93,-191.62 159.93,-191.62"/&gt;
&lt;/g&gt;  &lt;g id="node6" class="node"&gt;
&lt;title&gt;
Int | Bool
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="156.43" cy="-90" rx="57" ry="18"/&gt;
&lt;text text-anchor="middle" x="156.43" y="-85.33" font-family="Times,serif" font-size="14.00" fill="red"&gt;Int
| Bool&lt;/text&gt; &lt;/g&gt; 
&lt;g id="edge5" class="edge"&gt;
&lt;title&gt;
List(Int) | Bool-&gt;Int | Bool
&lt;/title&gt;
&lt;path fill="none" stroke="none" d="M156.43,-143.7C156.43,-136.41 156.43,-127.73 156.43,-119.54"/&gt;
&lt;polygon fill="none" stroke="none" points="159.93,-119.62 156.43,-109.62 152.93,-119.62 159.93,-119.62"/&gt;
&lt;/g&gt;  &lt;g id="node7" class="node"&gt;
&lt;title&gt;
Bool2
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="156.43" cy="-18" rx="33.32" ry="18"/&gt;
&lt;text text-anchor="middle" x="156.43" y="-13.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;Bool&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge6" class="edge"&gt;
&lt;title&gt;
Int | Bool-&gt;Bool2
&lt;/title&gt;
&lt;path fill="none" stroke="none" d="M156.43,-71.7C156.43,-64.41 156.43,-55.73 156.43,-47.54"/&gt;
&lt;polygon fill="none" stroke="none" points="159.93,-47.62 156.43,-37.62 152.93,-47.62 159.93,-47.62"/&gt;
&lt;/g&gt;  &lt;g id="node8" class="node"&gt;
&lt;title&gt;
C(_)
&lt;/title&gt;
&lt;ellipse fill="none"  cx="361.43" cy="-450" rx="30.69" ry="18"/&gt;
&lt;text text-anchor="middle" x="361.43" y="-445.32" font-family="Times,serif" font-size="14.00"&gt;C(_)&lt;/text&gt;
&lt;/g&gt;  &lt;g id="node9" class="node"&gt;
&lt;title&gt;
Pair
&lt;/title&gt;
&lt;ellipse fill="none"  cx="361.43" cy="-378" rx="40.69" ry="18"/&gt;
&lt;text text-anchor="middle" x="361.43" y="-373.32" font-family="Times,serif" font-size="14.00"&gt;(_,
_)&lt;/text&gt; &lt;/g&gt;  &lt;g id="edge7" class="edge"&gt;
&lt;title&gt;
C(_)-&gt;Pair
&lt;/title&gt;
&lt;path fill="none"  d="M361.43,-431.7C361.43,-424.41 361.43,-415.73 361.43,-407.54"/&gt;
&lt;polygon   points="364.93,-407.62 361.43,-397.62 357.93,-407.62 364.93,-407.62"/&gt;
&lt;/g&gt;  &lt;g id="node10" class="node"&gt;
&lt;title&gt;
a1
&lt;/title&gt;
&lt;ellipse fill="none"  cx="361.43" cy="-306" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="361.43" y="-301.32" font-family="Times,serif" font-size="14.00"&gt;a&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge8" class="edge"&gt;
&lt;title&gt;
Pair-&gt;a1
&lt;/title&gt;
&lt;path fill="none"  d="M361.43,-359.7C361.43,-352.41 361.43,-343.73 361.43,-335.54"/&gt;
&lt;polygon   points="364.93,-335.62 361.43,-325.62 357.93,-335.62 364.93,-335.62"/&gt;
&lt;/g&gt;  &lt;g id="node11" class="node"&gt;
&lt;title&gt;
Pair2
&lt;/title&gt;
&lt;ellipse fill="none"  cx="361.43" cy="-234" rx="40.69" ry="18"/&gt;
&lt;text text-anchor="middle" x="361.43" y="-229.32" font-family="Times,serif" font-size="14.00"&gt;(_,
_)&lt;/text&gt; &lt;/g&gt;  &lt;g id="edge9" class="edge"&gt;
&lt;title&gt;
a1-&gt;Pair2
&lt;/title&gt;
&lt;path fill="none"  d="M361.43,-287.7C361.43,-280.41 361.43,-271.73 361.43,-263.54"/&gt;
&lt;polygon   points="364.93,-263.62 361.43,-253.62 357.93,-263.62 364.93,-263.62"/&gt;
&lt;/g&gt;  &lt;g id="node12" class="node replaced"&gt;
&lt;title&gt;
a2
&lt;/title&gt;
&lt;ellipse fill="none"  cx="361.43" cy="-162" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="361.43" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;a&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge10" class="edge replaced"&gt;
&lt;title&gt;
Pair2-&gt;a2
&lt;/title&gt;
&lt;path fill="none"  d="M361.43,-215.7C361.43,-208.41 361.43,-199.73 361.43,-191.54"/&gt;
&lt;polygon   points="364.93,-191.62 361.43,-181.62 357.93,-191.62 364.93,-191.62"/&gt;
&lt;/g&gt;  &lt;g id="node14" class="node"&gt;
&lt;title&gt;
List
&lt;/title&gt;
&lt;ellipse fill="none" stroke="blue" cx="436.43" cy="-162" rx="30.16" ry="18"/&gt;
&lt;text text-anchor="middle" x="436.43" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;List&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge12" class="edge"&gt;
&lt;title&gt;
Pair2-&gt;List
&lt;/title&gt;
&lt;path fill="none" stroke="blue" d="M378.07,-217.46C388.19,-208.03 401.26,-195.82 412.47,-185.36"/&gt;
&lt;polygon fill="blue" stroke="blue" points="414.57,-188.19 419.5,-178.81 409.8,-183.07 414.57,-188.19"/&gt;
&lt;/g&gt;  &lt;g id="node13" class="node"&gt;
&lt;title&gt;
Bool
&lt;/title&gt;
&lt;ellipse fill="none"  cx="361.43" cy="-18" rx="33.32" ry="18"/&gt;
&lt;text text-anchor="middle" x="361.43" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;Bool&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge11" class="edge replaced"&gt;
&lt;title&gt;
a2-&gt;Bool
&lt;/title&gt;
&lt;path fill="none"  d="M361.43,-143.59C361.43,-119.61 361.43,-76.14 361.43,-47.42"/&gt;
&lt;polygon   points="364.93,-47.62 361.43,-37.62 357.93,-47.62 364.93,-47.62"/&gt;
&lt;/g&gt;  &lt;g id="node15" class="node"&gt;
&lt;title&gt;
Int
&lt;/title&gt;
&lt;ellipse fill="none" stroke="blue" cx="436.43" cy="-90" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="436.43" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;Int&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge13" class="edge"&gt;
&lt;title&gt;
List-&gt;Int
&lt;/title&gt;
&lt;path fill="none" stroke="blue" d="M436.43,-143.7C436.43,-136.41 436.43,-127.73 436.43,-119.54"/&gt;
&lt;polygon fill="blue" stroke="blue" points="439.93,-119.62 436.43,-109.62 432.93,-119.62 439.93,-119.62"/&gt;
&lt;/g&gt;  &lt;g id="edge14" class="edge"&gt;
&lt;title&gt;
Int-&gt;Bool
&lt;/title&gt;
&lt;path fill="none" stroke="blue" d="M421.25,-74.83C411.06,-65.32 397.4,-52.57 385.71,-41.66"/&gt;
&lt;polygon fill="blue" stroke="blue" points="388.43,-39.41 378.73,-35.15 383.65,-44.53 388.43,-39.41"/&gt;
&lt;/g&gt;  &lt;g id="node16" class="node"&gt;
&lt;title&gt;
subst
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="481.43" cy="-306" rx="75.41" ry="18"/&gt;
&lt;text text-anchor="middle" x="481.43" y="-301.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;a
:= List(Int)&lt;/text&gt; &lt;/g&gt; &lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;p&gt;And that’s it! This is enough to fully implement type class
resolution in languages like Haskell, Rust or PureScript.&lt;/p&gt;
&lt;h2 id="what-about-entailment"&gt;What about entailment?&lt;/h2&gt;
&lt;p&gt;This can easily match simple instances, but what about instances like
&lt;code&gt;forall a. C(a) =&gt; C(List(a))&lt;/code&gt;? Here,
&lt;code&gt;C(List(a))&lt;/code&gt; &lt;em&gt;entails&lt;/em&gt; &lt;code&gt;C(a)&lt;/code&gt;, such that
&lt;code&gt;C(List(a))&lt;/code&gt; only holds if &lt;code&gt;C(a)&lt;/code&gt; holds. How do we
take that into account?&lt;/p&gt;
&lt;p&gt;Well, following GHC’s footsteps, this is very easy: we don’t! Type
class resolution only matches the “instance head” (i.e. the part after
the &lt;code&gt;=&gt;&lt;/code&gt;), so we only need to emit a &lt;em&gt;new&lt;/em&gt;
constraint for &lt;code&gt;C(a)&lt;/code&gt; when we land on that instance (using
our substitution to find the correct type for &lt;code&gt;a&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This might seem a bit limiting and there are more elaborate systems
that can use entailment information, but in an open world setting like
type classes where any module might add new instances, these can have
some serious subtle downsides around modularity. Only matching on the
instance head is a very reasonable pragmatic choice that is enough to
cover most real world cases while keeping excellent performance.&lt;/p&gt;
&lt;h2 id="row-polymorphism"&gt;Row Polymorphism&lt;/h2&gt;
&lt;p&gt;The system we covered so far works very well for classic ML-style
type systems that consist exclusively of (possibly parameterized) type
constructors, but not every type system is this simple.&lt;/p&gt;
&lt;p&gt;A common type system extension is row polymorphism, which can be used
to model extensible records, polymorphic variants, and even algebraic
effects. How do we include this in our trie?&lt;/p&gt;
&lt;p&gt;The fundamental issue with row polymorphism is that the order of
labels in a row does not matter. In other words,
&lt;code&gt;{ x : Int, y : Bool }&lt;/code&gt; and
&lt;code&gt;{ y : Bool, x : Int }&lt;/code&gt; are the same type (and hence,
depending on the instantiations of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;,
even &lt;code&gt;{ x : Int | a }&lt;/code&gt; and &lt;code&gt;{ y : Bool | b }&lt;/code&gt;
might be equal). Depending on the exact flavor of your type system, rows
might be allowed to have duplicate labels. In that case, only the order
of &lt;em&gt;distinct&lt;/em&gt; labels is irrelevant. For example,
&lt;code&gt;{ x : Int, y : Bool, x : String }&lt;/code&gt; is equal to
&lt;code&gt;{ y : Bool, x : Int, x : String }&lt;/code&gt;, but not
&lt;code&gt;{ x : String, x : Int, y : Bool }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;How could we possibly represent type class instances for these types
in a trie?&lt;/p&gt;
&lt;p&gt;The answer is actually surprisingly easy. We can treat the record
with only its labels as a head constructor, similar to what we did
before. Unlike before, we &lt;em&gt;canonicalize&lt;/em&gt; rows by sorting their
fields. This is especially important if we want to use the trie to
detect two instances for exactly the same type (since we should probably
throw an error in that case).&lt;/p&gt;
&lt;p&gt;A beautiful property of the duplicate label semantics outlined above
is that canonicalizing records with duplicate labels boils down to a
stable sort since it only needs to preserve the order of duplicate
labels.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;{ y : Bool, x : Int }&lt;/code&gt; will be canonicalized
to &lt;code&gt;{ x : Int, y : Bool }&lt;/code&gt; and subsequently unrolled to&lt;/p&gt;
&lt;div class="dot-output"&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Generated by graphviz version 9.0.0 (0)
 --&gt;

&lt;svg width="174pt" height="188pt" viewBox="0.00 0.00 173.55 188.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 184)"&gt;
 &lt;g id="node1" class="node"&gt;
&lt;title&gt;
{ x : \&lt;em&gt;, y : \&lt;/em&gt; }
&lt;/title&gt;
&lt;ellipse fill="none"  cx="82.77" cy="-162" rx="82.77" ry="18"/&gt;
&lt;text text-anchor="middle" x="82.77" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;{
x : _, y : _ }&lt;/text&gt; &lt;/g&gt;  &lt;g id="node2" class="node"&gt;
&lt;title&gt;
Int
&lt;/title&gt;
&lt;ellipse fill="none"  cx="82.77" cy="-90" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="82.77" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;Int&lt;/text&gt;
&lt;/g&gt; 
&lt;g id="edge1" class="edge"&gt;
&lt;title&gt;
{ x : \&lt;em&gt;, y : \&lt;/em&gt; }-&gt;Int
&lt;/title&gt;
&lt;path fill="none"  d="M82.77,-143.7C82.77,-136.41 82.77,-127.73 82.77,-119.54"/&gt;
&lt;polygon   points="86.27,-119.62 82.77,-109.62 79.27,-119.62 86.27,-119.62"/&gt;
&lt;/g&gt;  &lt;g id="node3" class="node"&gt;
&lt;title&gt;
Bool
&lt;/title&gt;
&lt;ellipse fill="none"  cx="82.77" cy="-18" rx="33.32" ry="18"/&gt;
&lt;text text-anchor="middle" x="82.77" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;Bool&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge2" class="edge"&gt;
&lt;title&gt;
Int-&gt;Bool
&lt;/title&gt;
&lt;path fill="none"  d="M82.77,-71.7C82.77,-64.41 82.77,-55.73 82.77,-47.54"/&gt;
&lt;polygon   points="86.27,-47.62 82.77,-37.62 79.27,-47.62 86.27,-47.62"/&gt;
&lt;/g&gt; &lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;p&gt;and &lt;code&gt;{ x : Int, y : Bool, x : String | a }&lt;/code&gt; becomes&lt;/p&gt;
&lt;div class="dot-output"&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Generated by graphviz version 9.0.0 (0)
 --&gt;

&lt;svg width="267pt" height="332pt" viewBox="0.00 0.00 267.20 332.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 328)"&gt;
 &lt;g id="node1" class="node"&gt;
&lt;title&gt;
{ x : \&lt;em&gt;, x : \&lt;/em&gt;, y : \_ | \_ }
&lt;/title&gt;
&lt;ellipse fill="none"  cx="129.6" cy="-306" rx="129.6" ry="18"/&gt;
&lt;text text-anchor="middle" x="129.6" y="-301.32" font-family="Times,serif" font-size="14.00"&gt;{
x : _, x : _, y : _ | _ }&lt;/text&gt; &lt;/g&gt; 
&lt;g id="node2" class="node"&gt;
&lt;title&gt;
Int
&lt;/title&gt;
&lt;ellipse fill="none"  cx="129.6" cy="-234" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="129.6" y="-229.32" font-family="Times,serif" font-size="14.00"&gt;Int&lt;/text&gt;
&lt;/g&gt; 
&lt;g id="edge1" class="edge"&gt;
&lt;title&gt;
{ x : \&lt;em&gt;, x : \&lt;/em&gt;, y : \_ | \_ }-&gt;Int
&lt;/title&gt;
&lt;path fill="none"  d="M129.6,-287.7C129.6,-280.41 129.6,-271.73 129.6,-263.54"/&gt;
&lt;polygon   points="133.1,-263.62 129.6,-253.62 126.1,-263.62 133.1,-263.62"/&gt;
&lt;/g&gt;  &lt;g id="node3" class="node"&gt;
&lt;title&gt;
String
&lt;/title&gt;
&lt;ellipse fill="none"  cx="129.6" cy="-162" rx="42.79" ry="18"/&gt;
&lt;text text-anchor="middle" x="129.6" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;String&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge2" class="edge"&gt;
&lt;title&gt;
Int-&gt;String
&lt;/title&gt;
&lt;path fill="none"  d="M129.6,-215.7C129.6,-208.41 129.6,-199.73 129.6,-191.54"/&gt;
&lt;polygon   points="133.1,-191.62 129.6,-181.62 126.1,-191.62 133.1,-191.62"/&gt;
&lt;/g&gt;  &lt;g id="node4" class="node"&gt;
&lt;title&gt;
Bool
&lt;/title&gt;
&lt;ellipse fill="none"  cx="129.6" cy="-90" rx="33.32" ry="18"/&gt;
&lt;text text-anchor="middle" x="129.6" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;Bool&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge3" class="edge"&gt;
&lt;title&gt;
String-&gt;Bool
&lt;/title&gt;
&lt;path fill="none"  d="M129.6,-143.7C129.6,-136.41 129.6,-127.73 129.6,-119.54"/&gt;
&lt;polygon   points="133.1,-119.62 129.6,-109.62 126.1,-119.62 133.1,-119.62"/&gt;
&lt;/g&gt;  &lt;g id="node5" class="node"&gt;
&lt;title&gt;
a
&lt;/title&gt;
&lt;ellipse fill="none"  cx="129.6" cy="-18" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="129.6" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;a&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge4" class="edge"&gt;
&lt;title&gt;
Bool-&gt;a
&lt;/title&gt;
&lt;path fill="none"  d="M129.6,-71.7C129.6,-64.41 129.6,-55.73 129.6,-47.54"/&gt;
&lt;polygon   points="133.1,-47.62 129.6,-37.62 126.1,-47.62 133.1,-47.62"/&gt;
&lt;/g&gt; &lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;p&gt;Now, when matching a type against a row head constructor like this,
we move the types from the head constructor labels to the front in
canonical order. This ensures that they are matched against the correct
trie fields and keeps the remaining row to be matched against the
extension variable if applicable.&lt;/p&gt;
&lt;p&gt;For example, this is how one possible match could behave&lt;/p&gt;
&lt;div class="dot-output"&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!-- Generated by graphviz version 9.0.0 (0)
 --&gt;

&lt;svg width="596pt" height="260pt" viewBox="0.00 0.00 596.42 260.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 256)"&gt;
 &lt;g id="node1" class="node"&gt;
&lt;title&gt;
record
&lt;/title&gt;
&lt;text text-anchor="middle" x="132.23" y="-229.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;{
z : String, y : Bool, x : Int }&lt;/text&gt; &lt;/g&gt;
 &lt;g id="node2" class="node"&gt;
&lt;title&gt;
Int | String | { y : Bool }
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="132.23" cy="-162" rx="132.23" ry="18"/&gt;
&lt;text text-anchor="middle" x="132.23" y="-157.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;Int
| String | { y : Bool }&lt;/text&gt; &lt;/g&gt;

&lt;g id="edge1" class="edge"&gt;
&lt;title&gt;
record-&gt;Int | String | { y : Bool }
&lt;/title&gt;
&lt;path fill="none" stroke="none" d="M132.23,-216.05C132.23,-208.68 132.23,-199.84 132.23,-191.51"/&gt;
&lt;polygon fill="none" stroke="none" points="135.73,-191.79 132.23,-181.79 128.73,-191.79 135.73,-191.79"/&gt;
&lt;/g&gt;  &lt;g id="node3" class="node"&gt;
&lt;title&gt;
String | { y : Bool }
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="132.23" cy="-90" rx="108.55" ry="18"/&gt;
&lt;text text-anchor="middle" x="132.23" y="-85.33" font-family="Times,serif" font-size="14.00" fill="red"&gt;String
| { y : Bool }&lt;/text&gt; &lt;/g&gt;

&lt;g id="edge2" class="edge"&gt;
&lt;title&gt;
Int | String | { y : Bool }-&gt;String | { y : Bool }
&lt;/title&gt;
&lt;path fill="none" stroke="none" d="M132.23,-143.7C132.23,-136.41 132.23,-127.73 132.23,-119.54"/&gt;
&lt;polygon fill="none" stroke="none" points="135.73,-119.62 132.23,-109.62 128.73,-119.62 135.73,-119.62"/&gt;
&lt;/g&gt;  &lt;g id="node4" class="node"&gt;
&lt;title&gt;
{ y : Bool }
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="132.23" cy="-18" rx="67.52" ry="18"/&gt;
&lt;text text-anchor="middle" x="132.23" y="-13.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;{
y : Bool }&lt;/text&gt; &lt;/g&gt;

&lt;g id="edge3" class="edge"&gt;
&lt;title&gt;
String | { y : Bool }-&gt;{ y : Bool }
&lt;/title&gt;
&lt;path fill="none" stroke="none" d="M132.23,-71.7C132.23,-64.41 132.23,-55.73 132.23,-47.54"/&gt;
&lt;polygon fill="none" stroke="none" points="135.73,-47.62 132.23,-37.62 128.73,-47.62 135.73,-47.62"/&gt;
&lt;/g&gt;  &lt;g id="node5" class="node"&gt;
&lt;title&gt;
rowhead
&lt;/title&gt;
&lt;ellipse fill="none"  cx="361.23" cy="-234" rx="99.61" ry="18"/&gt;
&lt;text text-anchor="middle" x="361.23" y="-229.32" font-family="Times,serif" font-size="14.00"&gt;{
x : _, z : _ | _ }&lt;/text&gt; &lt;/g&gt;  &lt;g id="node6" class="node"&gt;
&lt;title&gt;
Int
&lt;/title&gt;
&lt;ellipse fill="none"  cx="361.23" cy="-162" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="361.23" y="-157.32" font-family="Times,serif" font-size="14.00"&gt;Int&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge4" class="edge"&gt;
&lt;title&gt;
rowhead-&gt;Int
&lt;/title&gt;
&lt;path fill="none"  d="M361.23,-215.7C361.23,-208.41 361.23,-199.73 361.23,-191.54"/&gt;
&lt;polygon   points="364.73,-191.62 361.23,-181.62 357.73,-191.62 364.73,-191.62"/&gt;
&lt;/g&gt;  &lt;g id="node7" class="node"&gt;
&lt;title&gt;
String
&lt;/title&gt;
&lt;ellipse fill="none"  cx="361.23" cy="-90" rx="42.79" ry="18"/&gt;
&lt;text text-anchor="middle" x="361.23" y="-85.33" font-family="Times,serif" font-size="14.00"&gt;String&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge5" class="edge"&gt;
&lt;title&gt;
Int-&gt;String
&lt;/title&gt;
&lt;path fill="none"  d="M361.23,-143.7C361.23,-136.41 361.23,-127.73 361.23,-119.54"/&gt;
&lt;polygon   points="364.73,-119.62 361.23,-109.62 357.73,-119.62 364.73,-119.62"/&gt;
&lt;/g&gt;  &lt;g id="node8" class="node"&gt;
&lt;title&gt;
a
&lt;/title&gt;
&lt;ellipse fill="none"  cx="361.23" cy="-18" rx="27" ry="18"/&gt;
&lt;text text-anchor="middle" x="361.23" y="-13.32" font-family="Times,serif" font-size="14.00"&gt;a&lt;/text&gt;
&lt;/g&gt;  &lt;g id="edge6" class="edge"&gt;
&lt;title&gt;
String-&gt;a
&lt;/title&gt;
&lt;path fill="none"  d="M361.23,-71.7C361.23,-64.41 361.23,-55.73 361.23,-47.54"/&gt;
&lt;polygon   points="364.73,-47.62 361.23,-37.62 357.73,-47.62 364.73,-47.62"/&gt;
&lt;/g&gt;  &lt;g id="node9" class="node"&gt;
&lt;title&gt;
a := { y : Bool }
&lt;/title&gt;
&lt;ellipse fill="none" stroke="none" cx="497.23" cy="-18" rx="91.19" ry="18"/&gt;
&lt;text text-anchor="middle" x="497.23" y="-13.32" font-family="Times,serif" font-size="14.00" fill="red"&gt;a
:= { y : Bool }&lt;/text&gt; &lt;/g&gt; &lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;h2 id="overlapping-instances"&gt;Overlapping instances&lt;/h2&gt;
&lt;p&gt;Usually, requiring type class resolution to come up with a single
unambiguous instance is the right choice, but sometimes it makes sense
to disambiguate explicitly and let the compiler choose one instance over
another. Can we do this with our trie?&lt;/p&gt;
&lt;p&gt;Yes! In fact, since we report every matching candidate, we can
perform this disambiguation entirely on the result of type class
resolution without ever touching our trie. The exact rules for how to do
this can be a bit subtle, but one reasonable approach is the one taken
by GHC, which is documented &lt;a
href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/instances.html#overlapping-instances"&gt;in
the fantastic GHC User’s Guide&lt;/a&gt;&lt;a href="#fn3" class="footnote-ref"
id="fnref3" role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Even if you don’t plan on implementing a programming language with
type classes any time soon (why not?), there are a few things I would
like you to take away from this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tries are awesome!&lt;/li&gt;
&lt;li&gt;Picking the right data structures is incredibly important, even in
domains like type checkers where they typically don’t receive that much
love.&lt;/li&gt;
&lt;li&gt;There is a lot to be gained by applying knowledge from one area of
computer science (e.g. text processing) to another (e.g. type
checking)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If nothing else, this gave me a great opportunity to try out GraphViz
support on my blog.&lt;/p&gt;
&lt;aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;To my knowledge at the time of writing anyway. They
might have moved to something more efficient by now.&lt;a href="#fnref1"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;sorry.&lt;a href="#fnref2" class="footnote-back"
role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Seriously, this is an incredibly underrated resource for
nearly everything related to Haskell and GHC.&lt;a href="#fnref3"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;</description>
</item><item>
    <title>Fast Map Union and Local Instances Through Instance Types</title>
    <link>https://prophetlabs.de/posts/insttypes.html</link>
    <guid isPremaLink="true">https://prophetlabs.de/posts/insttypes.html</guid>
    <pubDate>2023-02-26</pubDate>
    <description>&lt;p&gt;In part 3&lt;a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; of my &lt;a
href="/posts/unsafeCoerceDict.html"&gt;crusade against&lt;/a&gt; &lt;a
href="/posts/coherentIP.html"&gt;GHC’s coherence guarantees&lt;/a&gt;, I have
actually done it! This time we will end up with a way to generate local
type class instances without any asterisks about code breaking with
optimizations. On the way, we are going to end up solving the dreaded
Fast Map Union Problem, combining two of my favorite Haskell tricks, and
discovering a bug in a previous version of GHC.&lt;/p&gt;
&lt;p&gt;But before we get to that, let’s start at the beginning&lt;/p&gt;
&lt;h2 id="what-even-is-this-fast-map-union-problem"&gt;What even is this
‘fast Map union problem’?&lt;/h2&gt;
&lt;p&gt;Let’s pretend that Haskell &lt;em&gt;did&lt;/em&gt; have consistent locally
overridable type class instances. In that case, the interface for
&lt;code&gt;Map&lt;/code&gt; would be completely broken.&lt;/p&gt;
&lt;p&gt;Look at the type of &lt;code&gt;Data.Map.insert&lt;/code&gt;&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;insert ::&lt;/span&gt; &lt;span class="dt"&gt;Ord&lt;/span&gt; k &lt;span class="ot"&gt;=&gt;&lt;/span&gt; k &lt;span class="ot"&gt;-&gt;&lt;/span&gt; v &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the issue? &lt;code&gt;Map&lt;/code&gt; is some kind of ordered tree
internally, so it depends on the &lt;code&gt;Ord&lt;/code&gt; instance being
consistent across different operations, but with local instances, we
don’t have any guarantees like that.&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- This uses the regular instance for Ord Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; insert (&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="fu"&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- This uses a different, incompatible instance on the same map!&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withLocalOrd reverseOrdInt &lt;span class="op"&gt;$&lt;/span&gt; insert (&lt;span class="dv"&gt;2&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you think about this for a bit, you may come up with a solution:
You can store the instance in the map. This is how most map
implementations in other languages work after all.&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;MkMap&lt;/span&gt; (&lt;span class="dt"&gt;Dict&lt;/span&gt; (&lt;span class="dt"&gt;Ord&lt;/span&gt; k)) (&lt;span class="dt"&gt;ActualMapImplementation&lt;/span&gt; k v)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now the type of insert doesn’t mention &lt;code&gt;Ord&lt;/code&gt; at all
anymore so everything is sunshine and roses&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;insert ::&lt;/span&gt; k &lt;span class="ot"&gt;-&gt;&lt;/span&gt; v &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;…until it isn’t! Consider the type of &lt;code&gt;union&lt;/code&gt; now&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;union ::&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What happens if both maps use different &lt;code&gt;Ord k&lt;/code&gt; instances?
We have no way to statically ensure that they don’t. The way to solve
this in practice would be to just reinsert every value from one map in
the other, but that means that union is now drastically slower than it
would be if we could assume that both maps use the same instance (It’s
now at least linear in the size of one map vs. logarithmic in that of
the smaller one).&lt;/p&gt;
&lt;h2 id="instance-types"&gt;Instance Types&lt;/h2&gt;
&lt;p&gt;Now, what we really need here is a way to statically ensure that both
maps use the same &lt;code&gt;Ord&lt;/code&gt; implementation. In a dependently
typed language, one could just carry the instance dictionary in the
type&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v (&lt;span class="ot"&gt;inst ::&lt;/span&gt; &lt;span class="dt"&gt;Ord&lt;/span&gt; k) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;union ::&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v inst &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v inst &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k v inst&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But we cannot do that in Haskell (yet?), so we need a few more
tricks. What we absolutely &lt;em&gt;need&lt;/em&gt; to do is to somehow move the
used instance to the type level, so let’s start there. While we cannot
directly depend on the instance value, we can define a dummy type as a
stand-in.&lt;/p&gt;
&lt;p&gt;With this new type, we can write a version of &lt;code&gt;Ord&lt;/code&gt; that
carries its concrete instance in the type. Every function with an
&lt;code&gt;Ord&lt;/code&gt; constraint should now be polymorphic over this instance
parameter.&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;OrdI&lt;/span&gt; inst a &lt;span class="op"&gt;|&lt;/span&gt; inst &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    compareI ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Ordering&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;RegularOrdInt&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;OrdI&lt;/span&gt; &lt;span class="dt"&gt;RegularOrdInt&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    compareI &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;compare&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-8"&gt;&lt;a href="#cb7-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;ReverseOrdInt&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-9"&gt;&lt;a href="#cb7-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;OrdI&lt;/span&gt; &lt;span class="dt"&gt;ReverseOrdInt&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-10"&gt;&lt;a href="#cb7-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    compareI x y &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;compare&lt;/span&gt; x y &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-11"&gt;&lt;a href="#cb7-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;LT&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;GT&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-12"&gt;&lt;a href="#cb7-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;EQ&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;EQ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-13"&gt;&lt;a href="#cb7-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;GT&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;LT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we can finally parameterize Map over the used
&lt;code&gt;Ord&lt;/code&gt; instance!&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;IMap&lt;/span&gt; inst k v &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;insert ::&lt;/span&gt; &lt;span class="dt"&gt;OrdI&lt;/span&gt; inst k &lt;span class="ot"&gt;=&gt;&lt;/span&gt; k &lt;span class="ot"&gt;-&gt;&lt;/span&gt; v &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;IMap&lt;/span&gt; inst k v &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;IMap&lt;/span&gt; inst k v&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;union ::&lt;/span&gt; &lt;span class="dt"&gt;OrdI&lt;/span&gt; inst k &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;IMap&lt;/span&gt; inst k v &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;IMap&lt;/span&gt; inst k v &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;IMap&lt;/span&gt; inst k v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;union&lt;/code&gt; statically ensures that both maps agree on their
instances.&lt;/p&gt;
&lt;p&gt;The only ‘issue’ here is that we lose some inference. This is more or
less unavoidable if we want multiple instances to coexist (well, more on
that later). We need to tell Haskell what instance to use at some point,
but it’s not that bad, since at least for &lt;code&gt;IMap&lt;/code&gt;s, which
carry the instance in their type, we only need to do this once.&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt; map1 &lt;span class="ot"&gt;=&lt;/span&gt; insert &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; insert &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; empty &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;RegularOrdInt&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt; map2 &lt;span class="ot"&gt;=&lt;/span&gt; insert &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;ReverseOrdInt&lt;/span&gt; &lt;span class="dv"&gt;3&lt;/span&gt; &lt;span class="dv"&gt;3&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; insert &lt;span class="dv"&gt;4&lt;/span&gt; &lt;span class="dv"&gt;4&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; empty&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;union map1 map2 &lt;span class="co"&gt;-- Type error: Couldn&#39;t match type &#39;RegularOrdInt&#39; with `ReverseOrdInt`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="how-do-local-instances-fit-into-this"&gt;How do local instances fit
into this?&lt;/h2&gt;
&lt;p&gt;Quite well as it turns out! We can combine two of my favorite Haskell
tricks to implement them in current Haskell (You can stop pretending
that they exist. We are going to implement them for real now)&lt;/p&gt;
&lt;p&gt;Local instances might differ between different executions of the same
code, so we need to make sure that the instance types can only be used
locally and cannot escape. If this sounds familiar that is because there
is a decent chance that you have used something similar before: &lt;a
href="https://hackage.haskell.org/package/base-4.17.0.0/docs/Control-Monad-ST.html#v:runST"&gt;&lt;code&gt;runST&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ST&lt;/code&gt; is a monad that is used for local mutability inside
pure code. You can use it to create &lt;code&gt;STRef&lt;/code&gt;s and mutate them,
just like you would in your favorite imperative language&lt;a href="#fn2"
class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;,
except that Haskell, by virtue of being a pure language, needs to make
absolutely sure that you never ever return an &lt;code&gt;STRef&lt;/code&gt; from
&lt;code&gt;runST&lt;/code&gt;. Doing so would allow effects in one usage of the
supposedly pure &lt;code&gt;runST&lt;/code&gt; to affect the result of another
one.&lt;/p&gt;
&lt;p&gt;How does &lt;code&gt;ST&lt;/code&gt; do this? It uses higher-rank types!&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;newSTRef ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;ST&lt;/span&gt; s (&lt;span class="dt"&gt;STRef&lt;/span&gt; s a)&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;runST ::&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; s&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;ST&lt;/span&gt; s a) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have never seen this before, you’re probably quite confused
right now. The type &lt;code&gt;forall s. ST s a&lt;/code&gt; specifies that the
argument to &lt;code&gt;runST&lt;/code&gt; needs to be an &lt;code&gt;ST&lt;/code&gt; value that
works for any possible instantiation of &lt;code&gt;s&lt;/code&gt;. Crucially for
this case, this means that the &lt;code&gt;s&lt;/code&gt; variable is, unlike
&lt;code&gt;a&lt;/code&gt;, &lt;em&gt;not&lt;/em&gt; a type parameter of &lt;code&gt;runST&lt;/code&gt;
itself, but actually one of &lt;em&gt;the arguments to runST&lt;/em&gt;. This is
much clearer if we write &lt;code&gt;runST&lt;/code&gt; with an explicit outer
&lt;code&gt;forall&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;runST ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; s&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;ST&lt;/span&gt; s a) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, the reason this ensures that no STRefs escape is that the
&lt;code&gt;s&lt;/code&gt; parameter of the &lt;code&gt;STRef&lt;/code&gt; is the same as that
of the containing &lt;code&gt;ST&lt;/code&gt; monad. If you &lt;em&gt;were&lt;/em&gt; able to
return an &lt;code&gt;STRef&lt;/code&gt; from the argument to &lt;code&gt;runST&lt;/code&gt;,
e.g. by passing something of type
&lt;code&gt;forall s. ST s (STRef s Int)&lt;/code&gt;, what type would the result
have? Blindly substituting would yield &lt;code&gt;STRef s Int&lt;/code&gt;, but
what is &lt;code&gt;s&lt;/code&gt; now? Previously, &lt;code&gt;s&lt;/code&gt; was bound by the
&lt;code&gt;forall&lt;/code&gt; in the type of the argument to &lt;code&gt;runST&lt;/code&gt;,
but that &lt;code&gt;forall&lt;/code&gt; does not exist anymore! This is why GHC
will not accept this code and complain about an ‘escaping skolem’.&lt;/p&gt;
&lt;p&gt;We can use exactly the same trick for local type class instances to
invent an instance type that only exists locally! If we can implement a
function of the following type, then this will ensure that instance
types cannot possibly escape.&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withOrdI ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a b&lt;span class="op"&gt;.&lt;/span&gt; (a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Ordering&lt;/span&gt;) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; inst&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;OrdI&lt;/span&gt; inst a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, how do we implement this function? If you read &lt;a
href="/posts/unsafeCoerceDict.html"&gt;the first post in this series&lt;/a&gt;,
you will probably know the answer already.&lt;/p&gt;
&lt;p&gt;At runtime, GHC represents type classes via a technique called
dictionary passing. This means that a function with an &lt;code&gt;Ord&lt;/code&gt;
constraint like &lt;code&gt;Ord a =&gt; a -&gt; a -&gt; Ordering&lt;/code&gt; will
be turned into a function that &lt;em&gt;takes an implementation of that type
class as an argument&lt;/em&gt; (&lt;code&gt;Ord a -&gt; a -&gt; a&lt;/code&gt;). This
implementation, called a dictionary, is just a regular record-like data
type that contains an implementation for every method.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;GADT&lt;/code&gt;s, we can capture this dictionary in a
value.&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;OrdIDict&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;OrdIDict&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Ord&lt;/span&gt; a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;OrdIDict&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we are now able to replicate the structure of this
&lt;code&gt;OrdIDict&lt;/code&gt; exactly, but with a custom record of methods, we
can use &lt;code&gt;unsafeCoerce&lt;/code&gt; to convert it to a functional
&lt;code&gt;OrdIDict a&lt;/code&gt;. By pattern matching on the result, we can
release the dictionary back into a regular instance, which now contains
our handwritten type class instance!&lt;/p&gt;
&lt;p&gt;Instinctively, your definition of &lt;code&gt;OrdIDict&lt;/code&gt; would
probably look like this&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;OrdIDict&lt;/span&gt; inst a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;OrdIDict&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;OrdI&lt;/span&gt; inst a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;OrdIDict&lt;/span&gt; inst a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is not going to work though. We need to invent a new type for
&lt;code&gt;inst&lt;/code&gt;, so &lt;code&gt;OrdIDict&lt;/code&gt; cannot take it as a
parameter. Thanks to Haskell’s support for existential types, this is
not actually an issue, since we can just leave it off&lt;a href="#fn3"
class="footnote-ref" id="fnref3"
role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb15-1"&gt;&lt;a href="#cb15-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;OrdIDict&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-2"&gt;&lt;a href="#cb15-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;OrdIDict&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;OrdI&lt;/span&gt; inst a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;OrdIDict&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;OrdI&lt;/code&gt; only has a single method, so it will be represented
by the equivalent of a newtype record at runtime. This is erased
entirely, so we do not need to build a record around our
&lt;code&gt;a -&gt; a -&gt; Ordering&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OrdIDict&lt;/code&gt; wrapper adds some indirection though, so we
need to replicate that.&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb16-1"&gt;&lt;a href="#cb16-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;FakeDict&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;FakeDict&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All preparations are complete. We are ready for the magic&lt;a
href="#fn4" class="footnote-ref" id="fnref4"
role="doc-noteref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb17-1"&gt;&lt;a href="#cb17-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withOrdI ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a b&lt;span class="op"&gt;.&lt;/span&gt; (a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Ordering&lt;/span&gt;) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; inst&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;OrdI&lt;/span&gt; inst a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id="cb17-2"&gt;&lt;a href="#cb17-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withOrdI dict body &lt;span class="ot"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span id="cb17-3"&gt;&lt;a href="#cb17-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; unsafeCoerce (&lt;span class="dt"&gt;FakeDict&lt;/span&gt; dict)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;OrdIDict&lt;/span&gt; a &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-4"&gt;&lt;a href="#cb17-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        (&lt;span class="dt"&gt;OrdIDict&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;inst) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; body &lt;span class="op"&gt;@&lt;/span&gt;inst&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that’s… it!&lt;/p&gt;
&lt;p&gt;Well, not quite. If you paid very close attention, you may notice
that we have no way to bind the &lt;code&gt;inst&lt;/code&gt; type variable in the
&lt;code&gt;(forall inst. OrdI inst a =&gt; b)&lt;/code&gt; argument. This means if
we put a lambda there, we cannot actually mention &lt;code&gt;inst&lt;/code&gt;
anywhere. This is easy enough to solve by introducing a &lt;a
href="https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-Proxy.html#t:Proxy"&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt;
value.&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb18-1"&gt;&lt;a href="#cb18-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withOrdIProxy ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a b&lt;span class="op"&gt;.&lt;/span&gt; (a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Ordering&lt;/span&gt;) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; inst&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;OrdI&lt;/span&gt; inst a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; inst &lt;span class="ot"&gt;-&gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id="cb18-2"&gt;&lt;a href="#cb18-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withOrdIProxy dict body &lt;span class="ot"&gt;=&lt;/span&gt; &lt;/span&gt;
&lt;span id="cb18-3"&gt;&lt;a href="#cb18-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; unsafeCoerce (&lt;span class="dt"&gt;FakeDict&lt;/span&gt; dict)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;OrdIDict&lt;/span&gt; a &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-4"&gt;&lt;a href="#cb18-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        (&lt;span class="dt"&gt;OrdIDict&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;inst) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; body &lt;span class="op"&gt;@&lt;/span&gt;inst (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;inst)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="lets-try-it-out"&gt;Let’s try it out!&lt;/h2&gt;
&lt;p&gt;We can start with some concrete instances&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb19-1"&gt;&lt;a href="#cb19-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;map1 &lt;span class="ot"&gt;=&lt;/span&gt; insert &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; (empty &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb19-2"&gt;&lt;a href="#cb19-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;map2 &lt;span class="ot"&gt;=&lt;/span&gt; insert &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt; (empty &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb19-3"&gt;&lt;a href="#cb19-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb19-4"&gt;&lt;a href="#cb19-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;map3 &lt;span class="ot"&gt;=&lt;/span&gt; insert &lt;span class="dv"&gt;3&lt;/span&gt; &lt;span class="dv"&gt;3&lt;/span&gt; (empty &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;ReverseIntOrd&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb19-5"&gt;&lt;a href="#cb19-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;map4 &lt;span class="ot"&gt;=&lt;/span&gt; insert &lt;span class="dv"&gt;4&lt;/span&gt; &lt;span class="dv"&gt;4&lt;/span&gt; (empty &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;ReverseIntOrd&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb19-6"&gt;&lt;a href="#cb19-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb19-7"&gt;&lt;a href="#cb19-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fine1 &lt;span class="ot"&gt;=&lt;/span&gt; union map1 map2&lt;/span&gt;
&lt;span id="cb19-8"&gt;&lt;a href="#cb19-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fine2 &lt;span class="ot"&gt;=&lt;/span&gt; union map3 map4&lt;/span&gt;
&lt;span id="cb19-9"&gt;&lt;a href="#cb19-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb19-10"&gt;&lt;a href="#cb19-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;notFine &lt;span class="ot"&gt;=&lt;/span&gt; union map1 map3 &lt;span class="co"&gt;-- fails!&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking good. Now let’s try local instances&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb20-1"&gt;&lt;a href="#cb20-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;local &lt;span class="ot"&gt;=&lt;/span&gt; withOrdIProxy &lt;span class="fu"&gt;compare&lt;/span&gt; \(&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;inst) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-2"&gt;&lt;a href="#cb20-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="ot"&gt; localMap1 ::&lt;/span&gt; &lt;span class="dt"&gt;IMap&lt;/span&gt; inst &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; insert &lt;span class="op"&gt;@&lt;/span&gt;inst &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; (empty &lt;span class="op"&gt;@&lt;/span&gt;inst)&lt;/span&gt;
&lt;span id="cb20-3"&gt;&lt;a href="#cb20-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb21"&gt;&lt;pre
class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb21-1"&gt;&lt;a href="#cb21-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;$&lt;/span&gt; ghc-9.2 insttypes.hs&lt;/span&gt;
&lt;span id="cb21-2"&gt;&lt;a href="#cb21-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;insttypes.hs:80:42:&lt;/span&gt; error:&lt;/span&gt;
&lt;span id="cb21-3"&gt;&lt;a href="#cb21-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="ex"&gt;•&lt;/span&gt; Could not deduce &lt;span class="er"&gt;(&lt;/span&gt;&lt;span class="ex"&gt;OrdI&lt;/span&gt; &lt;span class="er"&gt;(&lt;/span&gt;&lt;span class="ex"&gt;*&lt;/span&gt;&lt;span class="kw"&gt;)&lt;/span&gt; &lt;span class="ex"&gt;Int&lt;/span&gt;&lt;span class="kw"&gt;)&lt;/span&gt; &lt;span class="ex"&gt;arising&lt;/span&gt; from a use of ‘insert’&lt;/span&gt;
&lt;span id="cb21-4"&gt;&lt;a href="#cb21-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="ex"&gt;from&lt;/span&gt; the context: OrdI inst a0&lt;/span&gt;
&lt;span id="cb21-5"&gt;&lt;a href="#cb21-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="ex"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Huh. That is… strange. It looks like for some strange reason, GHC
defaults the &lt;code&gt;inst&lt;/code&gt; parameter to… &lt;code&gt;(*)&lt;/code&gt;&lt;a
href="#fn5" class="footnote-ref" id="fnref5"
role="doc-noteref"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;? Even if we add as many type
annotations as physically possible?&lt;/p&gt;
&lt;p&gt;If this smells like a bug in GHC, that is &lt;strong&gt;because it
is!&lt;/strong&gt; Or well, &lt;em&gt;was&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you run the same example with GHC 9.4, it will compile without
complaining.&lt;/p&gt;
&lt;p&gt;Now, let’s try that again&lt;/p&gt;
&lt;div class="sourceCode" id="cb22"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb22-1"&gt;&lt;a href="#cb22-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;local &lt;span class="ot"&gt;=&lt;/span&gt; withOrdIProxy &lt;span class="fu"&gt;compare&lt;/span&gt; \(&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;inst) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-2"&gt;&lt;a href="#cb22-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; localMap1 &lt;span class="ot"&gt;=&lt;/span&gt; insert &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; (empty &lt;span class="op"&gt;@&lt;/span&gt;inst)&lt;/span&gt;
&lt;span id="cb22-3"&gt;&lt;a href="#cb22-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; localMap2 &lt;span class="ot"&gt;=&lt;/span&gt; insert &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt; (empty &lt;span class="op"&gt;@&lt;/span&gt;inst)&lt;/span&gt;
&lt;span id="cb22-4"&gt;&lt;a href="#cb22-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb22-5"&gt;&lt;a href="#cb22-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; perfectlyFine &lt;span class="ot"&gt;=&lt;/span&gt; union localMap1 localMap2&lt;/span&gt;
&lt;span id="cb22-6"&gt;&lt;a href="#cb22-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb22-7"&gt;&lt;a href="#cb22-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="ot"&gt; notFine ::&lt;/span&gt; &lt;span class="dt"&gt;IMap&lt;/span&gt; &lt;span class="dt"&gt;RegularIntOrd&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; insert &lt;span class="op"&gt;@&lt;/span&gt;inst &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt; (empty &lt;span class="op"&gt;@&lt;/span&gt;inst) &lt;span class="co"&gt;-- fails!&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-8"&gt;&lt;a href="#cb22-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; notFine2 &lt;span class="ot"&gt;=&lt;/span&gt; union localMap1 map1 &lt;span class="co"&gt;-- also fails!&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-9"&gt;&lt;a href="#cb22-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb22-10"&gt;&lt;a href="#cb22-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    localMap1 &lt;span class="co"&gt;-- fails!&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perfect!&lt;/p&gt;
&lt;h3 id="do-we-have-to-annotate-the-instance-every-time"&gt;Do we have to
annotate the instance every time?&lt;/h3&gt;
&lt;p&gt;In this specific example with &lt;code&gt;IMap&lt;/code&gt;, the number of type
annotations required was quite manageable, but in code that uses
&lt;code&gt;OrdI&lt;/code&gt; like regular &lt;code&gt;Ord&lt;/code&gt;, this is much less
pleasant&lt;/p&gt;
&lt;div class="sourceCode" id="cb23"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb23-1"&gt;&lt;a href="#cb23-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;min3 ::&lt;/span&gt; &lt;span class="dt"&gt;IOrd&lt;/span&gt; inst a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb23-2"&gt;&lt;a href="#cb23-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;min3 x y z &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;compare&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;inst x y &lt;span class="kw"&gt;of&lt;/span&gt; &lt;span class="co"&gt;-- needs a type application!&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-3"&gt;&lt;a href="#cb23-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;GT&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;compare&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;inst y z &lt;span class="kw"&gt;of&lt;/span&gt; &lt;span class="co"&gt;-- this one as well&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-4"&gt;&lt;a href="#cb23-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;GT&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; z&lt;/span&gt;
&lt;span id="cb23-5"&gt;&lt;a href="#cb23-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        _ &lt;span class="ot"&gt;-&gt;&lt;/span&gt; y&lt;/span&gt;
&lt;span id="cb23-6"&gt;&lt;a href="#cb23-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    _ &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;compare&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;inst x z &lt;span class="kw"&gt;of&lt;/span&gt; &lt;span class="co"&gt;-- same here&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-7"&gt;&lt;a href="#cb23-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;GT&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;compare&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;inst y z &lt;span class="kw"&gt;of&lt;/span&gt; &lt;span class="co"&gt;-- also here&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-8"&gt;&lt;a href="#cb23-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;GT&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; z&lt;/span&gt;
&lt;span id="cb23-9"&gt;&lt;a href="#cb23-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            _ &lt;span class="ot"&gt;-&gt;&lt;/span&gt; y&lt;/span&gt;
&lt;span id="cb23-10"&gt;&lt;a href="#cb23-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        _ &lt;span class="ot"&gt;-&gt;&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Used directly like this, this technique is really just &lt;a
href="https://www.haskellforall.com/2012/05/scrap-your-type-classes.html"&gt;Scrap
your type classes&lt;/a&gt; with extra steps.&lt;/p&gt;
&lt;p&gt;This is frustrating because we are just running up against GHC’s
stubbornness here. There is only a single possible instance for
&lt;code&gt;IOrd inst a&lt;/code&gt; in scope, but GHC doesn’t want to choose it.
Usually, this behavior might make sense, but it’s really not helpful for
us.&lt;/p&gt;
&lt;p&gt;Fortunately for us though, we are not the first to run into this
issue! &lt;a
href="https://hackage.haskell.org/package/polysemy"&gt;Polysemy&lt;/a&gt;, the
popular effect system library, had the exact same problem. Polysemy
makes it possible to define effects of the form
&lt;code&gt;Member Effect r&lt;/code&gt; over a set of effects &lt;code&gt;r&lt;/code&gt;. The
issue here is that, unlike &lt;a
href="https://hackage.haskell.org/package/mtl"&gt;mtl&lt;/a&gt;, Polysemy allows
duplicate effects, so GHC again doesn’t trust that you really wanted to
use the constraint from the signature and not another, currently
unwritten one.&lt;/p&gt;
&lt;p&gt;How did Polysemy solve that? They wrote &lt;a
href="https://hackage.haskell.org/package/polysemy-plugin"&gt;a type
checker plugin&lt;/a&gt; that disambiguates Polysemy constraints whenever
there is exactly one relevant instance in scope.&lt;/p&gt;
&lt;p&gt;This is exactly what we want, so we could probably copy most of
it.&lt;/p&gt;
&lt;p&gt;But that is a topic for a future blog post.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We covered quite a bit of ground there.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We parameterized type classes over a type representing the
instance&lt;/li&gt;
&lt;li&gt;This made it possible to statically ensure that maps can safely be
merged in logarithmic time, even in the presence of local instances&lt;/li&gt;
&lt;li&gt;We managed to implement local type class instances that are actually
safe, even in the presence of optimizations&lt;/li&gt;
&lt;li&gt;We discovered a bug in GHC 9.2&lt;/li&gt;
&lt;li&gt;There is probably a way to avoid unnecessary type applications with
a GHC plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the first time in this series that I can write a conclusion
without begging you to ‘please never ever use this anywhere near
production’. This technique still relies on GHC’s internal type class
representation (and you should always be careful around
&lt;code&gt;unsafeCoerce&lt;/code&gt;) but so does the popular &lt;a
href="https://hackage.haskell.org/package/reflection"&gt;reflection&lt;/a&gt;
package, so you should be fine.&lt;/p&gt;
&lt;p&gt;If you want to try this for yourself, you can get the code &lt;a
href="https://gist.github.com/Innf107/53f1b6e2fdbb1ca0a49d1f75375c036c"&gt;in
a gist&lt;/a&gt;. Just make sure to use GHC 9.4 or above.&lt;/p&gt;
&lt;aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;You don’t need to have read any of the previous posts to
understand this, don’t worry. On the other hand, if you like this one,
you will probably enjoy the others as well ;)&lt;a href="#fnref1"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;If your favorite imperative language is OCaml or
Standard ML that is.&lt;a href="#fnref2" class="footnote-back"
role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;In fact, pattern matching on a value containing an
existentially quantified type variable will turn that variable into a
‘skolem’, just like the higher rank type in the &lt;code&gt;runST&lt;/code&gt;
example, so we are truly conjuring a new type from thin air with this.&lt;a
href="#fnref3" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;This is an OCaml joke. Don’t worry about it.&lt;a
href="#fnref4" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;&lt;code&gt;(*)&lt;/code&gt; is another way of writing &lt;a
href="https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-Kind.html#t:Type"&gt;&lt;code&gt;Type&lt;/code&gt;&lt;/a&gt;,
the type of types. The only reason this is even valid is that modern GHC
Haskell has dependent kinds and &lt;code&gt;Type : Type&lt;/code&gt;.&lt;a
href="#fnref5" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;</description>
</item><item>
    <title>Coherent Local Instances with Dynamic Types and ImplicitParams</title>
    <link>https://prophetlabs.de/posts/coherentIP.html</link>
    <guid isPremaLink="true">https://prophetlabs.de/posts/coherentIP.html</guid>
    <pubDate>2022-8-29</pubDate>
    <description>&lt;p&gt;If you read my &lt;a href="/posts/unsafeCoerceDict.html"&gt;previous
post&lt;/a&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; about local instances, you might
have noticed something. Remember how I said that
&lt;code&gt;ImplicitParams&lt;/code&gt; are really just &lt;a
href="/posts/unsafeCoerceDict.html#implicitparams"&gt;syntactic sugar for
instances of the type class &lt;code&gt;GHC.Classes.IP&lt;/code&gt;&lt;/a&gt;? Well,
unlike &lt;code&gt;withFakeDict&lt;/code&gt;, &lt;code&gt;ImplicitParams&lt;/code&gt; can safely
be overridden, without causing incoherence issues. Couldn’t we somehow
use &lt;code&gt;ImplicitParams&lt;/code&gt; to provide local type class instances
that can safely be overridden?&lt;/p&gt;
&lt;p&gt;Most type classes are a bit more complex than they look, so let’s
invent a new one to use as a running example.&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Pretty&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    pretty ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Pretty&lt;/code&gt; is just like &lt;code&gt;Show&lt;/code&gt;, but with fewer
methods and no preexisting instances that might get in our way.&lt;/p&gt;
&lt;p&gt;We also need to define a dictionary type for &lt;code&gt;Pretty&lt;/code&gt;. We
could use the Template Haskell machinery from last time for this, but
&lt;code&gt;Pretty&lt;/code&gt; is simple enough to do it manually for now.&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- The newtype is important since `Pretty` only has a single method&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    _pretty ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;boringPretty ::&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;boringPretty &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    _pretty &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;nicePretty ::&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;nicePretty &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    _pretty &lt;span class="ot"&gt;=&lt;/span&gt; \x &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="st"&gt;&quot;✨&quot;&lt;/span&gt; &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; x &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; &lt;span class="st"&gt;&quot;✨&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this, we could already write a few functions that use our ‘type
class’, just by accepting a corresponding dictionary as an implicit
parameter. This way we actually get something closely resembling local
instances already!&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;pretty ::&lt;/span&gt; (&lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; a) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;pretty &lt;span class="ot"&gt;=&lt;/span&gt; _pretty &lt;span class="op"&gt;?&lt;/span&gt;prettyInst&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;f ::&lt;/span&gt; (&lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; a) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; [a] &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;f xs &lt;span class="ot"&gt;=&lt;/span&gt; intercalate &lt;span class="st"&gt;&quot;, &quot;&lt;/span&gt; (&lt;span class="fu"&gt;map&lt;/span&gt; pretty xs)&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;prettyInst &lt;span class="ot"&gt;=&lt;/span&gt; boringPretty&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; f [&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="dv"&gt;2&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;prettyInst &lt;span class="ot"&gt;=&lt;/span&gt; nicePretty &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; f [&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="dv"&gt;2&lt;/span&gt;, &lt;span class="dv"&gt;3&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s also enable optimizations, just to make sure this is actually
coherent. :)&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre
class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;$ ghc -O2 Main.hs &amp;&amp; ./Main&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;[1 of 1] Compiling Main             ( Main.hs, Main.o )&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;Linking Main ...&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;5&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;✨5✨&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perfect!&lt;/p&gt;
&lt;p&gt;There is just one issue. While &lt;code&gt;ImplicitParams&lt;/code&gt; make it
almost trivial to work with &lt;em&gt;local&lt;/em&gt; instances, we lose the
ability to define regular &lt;em&gt;global&lt;/em&gt; instances.&lt;/p&gt;
&lt;p&gt;Whenever we want to use a function with a &lt;code&gt;?prettyInst&lt;/code&gt;
constraint, we always have to define the instance we want to use
somewhere locally in its lexical scope.&lt;/p&gt;
&lt;p&gt;If we wanted an actual replacement for type classes with local
&lt;em&gt;and&lt;/em&gt; global instances, we would need some kind of…&lt;/p&gt;
&lt;h2 id="global-implicitparams"&gt;Global &lt;code&gt;ImplicitParams&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;Remember how &lt;code&gt;IP&lt;/code&gt; is just a regular type class? Couldn’t
we just… you know… define a regular, global instance for
&lt;code&gt;IP&lt;/code&gt;?&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IP&lt;/span&gt; &lt;span class="st"&gt;&quot;x&quot;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ip &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;λ&lt;span class="op"&gt;&gt;&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;x&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So… uh… I honestly did not expect this to work, considering GHC
forbids manual &lt;code&gt;Typeable&lt;/code&gt; or &lt;code&gt;Generic&lt;/code&gt;
instances.&lt;/p&gt;
&lt;p&gt;Anyway, if we want to model our class with this, we can simply write
global instances as instances for &lt;code&gt;IP&lt;/code&gt; and override local
instances with &lt;code&gt;let ?x = ...&lt;/code&gt; just as we did before.&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IP&lt;/span&gt; &lt;span class="st"&gt;&quot;prettyInst&quot;&lt;/span&gt; (&lt;span class="dt"&gt;PrettyDict&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    pretty &lt;span class="ot"&gt;=&lt;/span&gt; boringPretty&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; (pretty (&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; (&lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;prettyInst &lt;span class="ot"&gt;=&lt;/span&gt; nicePretty &lt;span class="kw"&gt;in&lt;/span&gt; pretty (&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre
class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;$&lt;/span&gt; ghc &lt;span class="at"&gt;-O2&lt;/span&gt; Main.hs &lt;span class="kw"&gt;&amp;&amp;&lt;/span&gt; &lt;span class="ex"&gt;./Main&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;[1&lt;/span&gt; of 1] Compiling Main             &lt;span class="er"&gt;(&lt;/span&gt; &lt;span class="ex"&gt;Main.hs,&lt;/span&gt; Main.o &lt;span class="kw"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;Linking&lt;/span&gt; Main ...&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;✨5✨&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Awesome! Unlike our unsafeCoerce trick last time, optimizations don’t
break &lt;code&gt;ImplicitParams&lt;/code&gt;, so this is entirely safe!&lt;/p&gt;
&lt;p&gt;We just came up with a type class replacement that completely
subsumes local, as well as global instances in a few lines of code.&lt;/p&gt;
&lt;p&gt;It’s that simple!&lt;/p&gt;
&lt;h2 id="its-not-that-simple"&gt;It’s not that simple&lt;/h2&gt;
&lt;p&gt;If you look at the definition of &lt;code&gt;IP&lt;/code&gt;, you will likely
notice the deadly flaw in our current approach&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;IP&lt;/span&gt; x a &lt;span class="op"&gt;|&lt;/span&gt; x &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    ip ::&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;There is a functional dependency between the parameter name
and its type.&lt;/strong&gt;&lt;a href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; This means that every parameter name
can only ever be used with &lt;em&gt;the same type argument&lt;/em&gt; and so our
type class replacement can only ever have a single instance per class.
The entire purpose of type classes is to overload operations for
different types, so this completely defeats the point of using type
classes in the first place. :/&lt;/p&gt;
&lt;p&gt;If we try to write an instance for two separate types anyway, the
compiler is going to complain as expected, since we violated the
functional dependency.&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IP&lt;/span&gt; &lt;span class="st"&gt;&quot;prettyInst&quot;&lt;/span&gt; (&lt;span class="dt"&gt;PrettyDict&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    pretty &lt;span class="ot"&gt;=&lt;/span&gt; boringPretty&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Error: Functional dependency conflict&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IP&lt;/span&gt; &lt;span class="st"&gt;&quot;prettyInst&quot;&lt;/span&gt; (&lt;span class="dt"&gt;PrettyDict&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    pretty &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; &lt;span class="fu"&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2
id="when-life-gives-you-lemons"&gt;&lt;a href="https://www.youtube.com/watch?v=g8ufRnf2Exc" target="_blank"&gt;When
life gives you lemons&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unfortunately, since we can only have a single global &lt;code&gt;IP&lt;/code&gt;
instance, we cannot use Haskell’s regular type class dispatching
mechanism to select the instance that we want.&lt;/p&gt;
&lt;p&gt;But…&lt;/p&gt;
&lt;p&gt;we could try and build our own, &lt;em&gt;based on runtime type
information&lt;/em&gt;. This solution will not work for all types, but it
might work for all that implement &lt;code&gt;Typeable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;Typeable&lt;/code&gt;, we can extract a &lt;code&gt;TypeRep&lt;/code&gt;&lt;a
href="#fn3" class="footnote-ref" id="fnref3"
role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; from a &lt;code&gt;Proxy&lt;/code&gt; for a
given type and, thanks to &lt;code&gt;typeRepFingerprint&lt;/code&gt;, we are able
to turn this &lt;code&gt;TypeRep&lt;/code&gt; into a &lt;code&gt;Fingerprint&lt;/code&gt; that
is unique for every type. This &lt;code&gt;Fingerprint&lt;/code&gt; implements
&lt;code&gt;Ord&lt;/code&gt;, so we can use it as a key in a &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With this, we can build some machinery that selects an instance from
a &lt;code&gt;Map&lt;/code&gt; based on the runtime &lt;code&gt;TypeRep&lt;/code&gt; of a type.
The values of the &lt;code&gt;Map&lt;/code&gt; then represent the instances for the
given types.&lt;/p&gt;
&lt;p&gt;Conveniently, we already have a way of reifying instances, so we can
just store the concrete dictionaries (&lt;code&gt;PrettyDict&lt;/code&gt;s in this
case).&lt;/p&gt;
&lt;p&gt;We have to store dictionaries of different types
(e.g. &lt;code&gt;PrettyDict Int&lt;/code&gt;, &lt;code&gt;PrettyDict Bool&lt;/code&gt;, …), so
we could try some tricks with existentials, but since we are relying on
runtime type information anyway, it is easier to store them as &lt;a
href="https://hackage.haskell.org/package/base-4.16.1.0/docs/GHC-Exts.html#t:Any"&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt;
and use &lt;code&gt;unsafeCoerce&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;MkInstMap&lt;/span&gt; {&lt;span class="ot"&gt;unInstMap ::&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; &lt;span class="dt"&gt;Fingerprint&lt;/span&gt; &lt;span class="dt"&gt;Any&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To actually use this custom dispatching mechanism, we need to
reimplement our &lt;code&gt;pretty&lt;/code&gt; ‘method’, which now takes an
&lt;code&gt;InstMap&lt;/code&gt; as an implicit parameter and extracts the
dictionary for the type used, based on its &lt;code&gt;TypeRep&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;pretty ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; (&lt;span class="dt"&gt;Typeable&lt;/span&gt; a, &lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;pretty &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; key &lt;span class="ot"&gt;=&lt;/span&gt; typeRepFingerprint (typeRep (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a)) &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; M.lookup key (unInstMap &lt;span class="op"&gt;?&lt;/span&gt;prettyInst) &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-5"&gt;&lt;a href="#cb11-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="st"&gt;&quot;pretty: No instance found at runtime&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-6"&gt;&lt;a href="#cb11-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Just&lt;/span&gt; dict &lt;span class="ot"&gt;-&gt;&lt;/span&gt; _pretty &lt;span class="op"&gt;$&lt;/span&gt; unsafeCoerce dict&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To add a local instance to the instance map, all we have to do is to
update the implicit &lt;code&gt;?prettyInst&lt;/code&gt; parameter.&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withPretty ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a b&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Typeable&lt;/span&gt; a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; ((&lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withPretty dict x &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; key &lt;span class="ot"&gt;=&lt;/span&gt; typeRepFingerprint (typeRep (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a)) &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="dt"&gt;MkInstMap&lt;/span&gt; prevInst &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;prettyInst &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-5"&gt;&lt;a href="#cb12-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;prettyInst &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;MkInstMap&lt;/span&gt; (M.insert key (unsafeCoerce dict) prevInst) &lt;span class="kw"&gt;in&lt;/span&gt; &lt;/span&gt;
&lt;span id="cb12-6"&gt;&lt;a href="#cb12-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, so we gave up type safety, but in return, we gained the ability
to override instances locally… which we could already do with just
&lt;code&gt;ImplicitParams&lt;/code&gt; without any runtime type dispatch machinery.
Sounds like we are back to square one?&lt;/p&gt;
&lt;h2 id="recovering-type-safety"&gt;Recovering type safety&lt;/h2&gt;
&lt;p&gt;We have a way of locally overriding instances, but we should really
make sure that instances are actually available.&lt;/p&gt;
&lt;p&gt;How could we check this? Well, type classes are perfect for
invariants like this!&lt;/p&gt;
&lt;p&gt;If using type classes to implement a type class replacement sounds
pointless, keep in mind that we don’t care about the type class methods.
In fact, we don’t even need any! This way, incoherence is not an issue,
since the concrete instance chosen is irrelevant.&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb13-3"&gt;&lt;a href="#cb13-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;pretty ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; (&lt;span class="dt"&gt;Typeable&lt;/span&gt; a, &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a, &lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-4"&gt;&lt;a href="#cb13-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;pretty &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="co"&gt;-- same implementation&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we didn’t change anything on the term level. The
&lt;code&gt;HasPretty&lt;/code&gt; constraint in the type purely exists to make sure
that we call &lt;code&gt;withPretty&lt;/code&gt; at some point before calling
&lt;code&gt;pretty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To satisfy the &lt;code&gt;HasPretty&lt;/code&gt; constraint in the continuation
passed to &lt;code&gt;withPretty&lt;/code&gt;, we can just use the
&lt;code&gt;unsafeCoerce&lt;/code&gt; trick from the previous post.&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;LocalPrettyInst&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-3"&gt;&lt;a href="#cb14-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;HasPretty&lt;/span&gt; &lt;span class="dt"&gt;LocalPrettyInst&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-4"&gt;&lt;a href="#cb14-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-5"&gt;&lt;a href="#cb14-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withPretty ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a b&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Typeable&lt;/span&gt; a &lt;/span&gt;
&lt;span id="cb14-6"&gt;&lt;a href="#cb14-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;           &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; a &lt;/span&gt;
&lt;span id="cb14-7"&gt;&lt;a href="#cb14-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;           &lt;span class="ot"&gt;-&gt;&lt;/span&gt; ((&lt;span class="dt"&gt;HasPretty&lt;/span&gt; a, &lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; b) &lt;/span&gt;
&lt;span id="cb14-8"&gt;&lt;a href="#cb14-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;           &lt;span class="ot"&gt;-&gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id="cb14-9"&gt;&lt;a href="#cb14-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withPretty dict x &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-10"&gt;&lt;a href="#cb14-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; key &lt;span class="ot"&gt;=&lt;/span&gt; typeRepFingerprint (typeRep (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a)) &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-11"&gt;&lt;a href="#cb14-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="dt"&gt;MkInstMap&lt;/span&gt; previousInst &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;prettyInst &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-12"&gt;&lt;a href="#cb14-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; unsafeCoerce (&lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (&lt;span class="dt"&gt;HasPretty&lt;/span&gt; &lt;span class="dt"&gt;LocalPrettyInst&lt;/span&gt;))&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (&lt;span class="dt"&gt;HasPretty&lt;/span&gt; a) &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-13"&gt;&lt;a href="#cb14-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span id="cb14-14"&gt;&lt;a href="#cb14-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;prettyInst &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;MkInstMap&lt;/span&gt; (M.insert key (unsafeCoerce dict) previousInst) &lt;span class="kw"&gt;in&lt;/span&gt; &lt;/span&gt;
&lt;span id="cb14-15"&gt;&lt;a href="#cb14-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, a function that would have a &lt;code&gt;Pretty a&lt;/code&gt; constraint
with regular classes or a &lt;code&gt;(?prettyInst :: PrettyDict a)&lt;/code&gt;
constraint with &lt;code&gt;ImplicitParams&lt;/code&gt;, now needs a
&lt;code&gt;(Typeable a, HasPretty a, ?prettyInst :: InstMap)&lt;/code&gt;
constraint.&lt;/p&gt;
&lt;h2 id="going-global"&gt;Going global&lt;/h2&gt;
&lt;p&gt;We recovered type safety, but our approach still doesn’t offer any
advantage over pure &lt;code&gt;ImplicitParams&lt;/code&gt;, since we still don’t
have a way to write global instances.&lt;/p&gt;
&lt;p&gt;Your first thought might be to write a global instance for
&lt;code&gt;IP "prettyInst" InstMap&lt;/code&gt; and somehow populate that when
defining new global instances.&lt;/p&gt;
&lt;p&gt;Unfortunately, this doesn’t work. We could try to use a global
&lt;code&gt;IORef&lt;/code&gt; and extend it at runtime, but how would we run the
code to extend that IORef? Haskell doesn’t provide a way to run IO code
at module load time, so we couldn’t make sure that the map contains all
relevant instances without having to populate it in
&lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead, let’s start with an empty map.&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb15-1"&gt;&lt;a href="#cb15-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IP&lt;/span&gt; &lt;span class="st"&gt;&quot;prettyInst&quot;&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-2"&gt;&lt;a href="#cb15-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ip &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;MkInstMap&lt;/span&gt; &lt;span class="fu"&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The typechecker prevents us from using this instance without further
local instances since we don’t have any &lt;code&gt;HasPretty&lt;/code&gt; instances
yet.&lt;/p&gt;
&lt;p&gt;Fortunately, telling the type checker about global instances is quite
easy: We just have to implement &lt;code&gt;HasPretty&lt;/code&gt; for the type we
are writing an instance for.&lt;/p&gt;
&lt;p&gt;Since we don’t have an actual instance yet, this would still crash at
runtime; our instance map doesn’t have any implementations by
default.&lt;/p&gt;
&lt;p&gt;Consider this: In case the instance map does not contain an entry for
the type &lt;code&gt;pretty&lt;/code&gt; is called at, but it &lt;em&gt;is called&lt;/em&gt;
(meaning the &lt;code&gt;HasPretty&lt;/code&gt; constraint was satisfied), we know
that there &lt;em&gt;has to be a global instance&lt;/em&gt; and that &lt;em&gt;no local
instances are in scope&lt;/em&gt;. Thus, crucially, &lt;strong&gt;there is only a
single instance for &lt;code&gt;HasPretty&lt;/code&gt;, which is a regular global
instance&lt;/strong&gt;. If there is only a single instance, we don’t need to
deal with incoherence and we are able to use actual methods from
&lt;code&gt;HasPretty&lt;/code&gt; with confidence that they are coming from the
global instance with or without optimizations.&lt;/p&gt;
&lt;p&gt;What would possible methods on &lt;code&gt;HasPretty&lt;/code&gt; look like? We
still need to specify the implementation of our global instance
somewhere, so this would be a perfect place to put that.&lt;/p&gt;
&lt;p&gt;Now, whenever &lt;code&gt;pretty&lt;/code&gt; is called and detects a runtime
instance in its instance map, we know that the instance has been
overridden and &lt;code&gt;HasPretty&lt;/code&gt; is potentially contaminated, so we
use the instance from the instance map directly and ignore any methods
from &lt;code&gt;HasPretty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If there is no runtime instance, we know that the instance it is
called at has to be a global, coherent instance and we can safely use
the implementation from &lt;code&gt;HasPretty&lt;/code&gt; to maintain
coherence.&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb16-1"&gt;&lt;a href="#cb16-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-2"&gt;&lt;a href="#cb16-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    globalInst ::&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb16-3"&gt;&lt;a href="#cb16-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-4"&gt;&lt;a href="#cb16-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;LocalPrettyInst&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-5"&gt;&lt;a href="#cb16-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-6"&gt;&lt;a href="#cb16-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;HasPretty&lt;/span&gt; &lt;span class="dt"&gt;LocalPrettyInst&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-7"&gt;&lt;a href="#cb16-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- This will never be called unless someone seriously messes with things, &lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-8"&gt;&lt;a href="#cb16-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- since `withPretty` always adds an instance to the ?prettyInst InstMap &lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-9"&gt;&lt;a href="#cb16-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    globalInst &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="st"&gt;&quot;pretty: No instance found at runtime&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-10"&gt;&lt;a href="#cb16-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-11"&gt;&lt;a href="#cb16-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;pretty ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; (&lt;span class="dt"&gt;Typeable&lt;/span&gt; a, &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a, &lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-12"&gt;&lt;a href="#cb16-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;pretty &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-13"&gt;&lt;a href="#cb16-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; key &lt;span class="ot"&gt;=&lt;/span&gt; typeRepFingerprint (typeRep (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a)) &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-14"&gt;&lt;a href="#cb16-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; M.lookup key (unInstMap &lt;span class="op"&gt;?&lt;/span&gt;prettyInst) &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-15"&gt;&lt;a href="#cb16-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span id="cb16-16"&gt;&lt;a href="#cb16-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            _pretty globalInst&lt;/span&gt;
&lt;span id="cb16-17"&gt;&lt;a href="#cb16-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Just&lt;/span&gt; dict &lt;span class="ot"&gt;-&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-18"&gt;&lt;a href="#cb16-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            _pretty &lt;span class="op"&gt;$&lt;/span&gt; unsafeCoerce dict&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works!&lt;/p&gt;
&lt;p&gt;If we try the example from before…&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb17-1"&gt;&lt;a href="#cb17-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;HasPretty&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-2"&gt;&lt;a href="#cb17-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    globalInst &lt;span class="ot"&gt;=&lt;/span&gt; boringPretty&lt;/span&gt;
&lt;span id="cb17-3"&gt;&lt;a href="#cb17-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-4"&gt;&lt;a href="#cb17-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb17-5"&gt;&lt;a href="#cb17-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-6"&gt;&lt;a href="#cb17-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; (pretty (&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb17-7"&gt;&lt;a href="#cb17-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; (withPretty nicePretty (pretty (&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre
class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb18-1"&gt;&lt;a href="#cb18-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;$&lt;/span&gt; ghc &lt;span class="at"&gt;-O2&lt;/span&gt; Main.hs &lt;span class="kw"&gt;&amp;&amp;&lt;/span&gt; &lt;span class="ex"&gt;./Main&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-2"&gt;&lt;a href="#cb18-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;[1&lt;/span&gt; of 1] Compiling Main             &lt;span class="er"&gt;(&lt;/span&gt; &lt;span class="ex"&gt;Main.hs,&lt;/span&gt; Main.o &lt;span class="kw"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-3"&gt;&lt;a href="#cb18-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;Linking&lt;/span&gt; Main ...&lt;/span&gt;
&lt;span id="cb18-4"&gt;&lt;a href="#cb18-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-5"&gt;&lt;a href="#cb18-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;✨5✨&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… everything works as expected, even with optimizations!&lt;/p&gt;
&lt;p&gt;There is actually not much boilerplate involved in this technique,
compared to regular type classes and instances.&lt;/p&gt;
&lt;p&gt;The main limitation is that types used in instances all have to
implement &lt;code&gt;Typeable&lt;/code&gt;, so we can only use this for relatively
simple instances.&lt;/p&gt;
&lt;p&gt;Defining a class is quite a bit more verbose since we have to define
a dictionary type, a &lt;code&gt;HasX&lt;/code&gt; class to carry the global
instance, a global instance for the associated implicit parameter as
well as functions to apply and override the active instance.&lt;/p&gt;
&lt;p&gt;To use our running example, the class definition&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb19-1"&gt;&lt;a href="#cb19-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Pretty&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-2"&gt;&lt;a href="#cb19-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    pretty ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb20-1"&gt;&lt;a href="#cb20-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb20-2"&gt;&lt;a href="#cb20-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    _pretty ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-3"&gt;&lt;a href="#cb20-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id="cb20-4"&gt;&lt;a href="#cb20-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb20-5"&gt;&lt;a href="#cb20-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-6"&gt;&lt;a href="#cb20-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    globalInst ::&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb20-7"&gt;&lt;a href="#cb20-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb20-8"&gt;&lt;a href="#cb20-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;pretty ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; (&lt;span class="dt"&gt;Typeable&lt;/span&gt; a, &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a, &lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-9"&gt;&lt;a href="#cb20-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;pretty &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-10"&gt;&lt;a href="#cb20-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; key &lt;span class="ot"&gt;=&lt;/span&gt; typeRepFingerprint (typeRep (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a)) &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-11"&gt;&lt;a href="#cb20-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; M.lookup key (unInstMap &lt;span class="op"&gt;?&lt;/span&gt;prettyInst) &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-12"&gt;&lt;a href="#cb20-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span id="cb20-13"&gt;&lt;a href="#cb20-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            _pretty globalInst&lt;/span&gt;
&lt;span id="cb20-14"&gt;&lt;a href="#cb20-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Just&lt;/span&gt; dict &lt;span class="ot"&gt;-&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-15"&gt;&lt;a href="#cb20-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            _pretty &lt;span class="op"&gt;$&lt;/span&gt; unsafeCoerce dict&lt;/span&gt;
&lt;span id="cb20-16"&gt;&lt;a href="#cb20-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb20-17"&gt;&lt;a href="#cb20-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;LocalPrettyInst&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-18"&gt;&lt;a href="#cb20-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb20-19"&gt;&lt;a href="#cb20-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;HasPretty&lt;/span&gt; &lt;span class="dt"&gt;LocalPrettyInst&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-20"&gt;&lt;a href="#cb20-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    globalInst &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="st"&gt;&quot;pretty: No instance found at runtime&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-21"&gt;&lt;a href="#cb20-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb20-22"&gt;&lt;a href="#cb20-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withPretty ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a b&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Typeable&lt;/span&gt; a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; ((&lt;span class="dt"&gt;HasPretty&lt;/span&gt; a, &lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id="cb20-23"&gt;&lt;a href="#cb20-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withPretty dict x &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-24"&gt;&lt;a href="#cb20-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; key &lt;span class="ot"&gt;=&lt;/span&gt; typeRepFingerprint (typeRep (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a)) &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-25"&gt;&lt;a href="#cb20-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="dt"&gt;MkInstMap&lt;/span&gt; prevInst &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;prettyInst &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-26"&gt;&lt;a href="#cb20-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; unsafeCoerce (&lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (&lt;span class="dt"&gt;HasPretty&lt;/span&gt; &lt;span class="dt"&gt;LocalPrettyInst&lt;/span&gt;))&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (&lt;span class="dt"&gt;HasPretty&lt;/span&gt; a) &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-27"&gt;&lt;a href="#cb20-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;/span&gt;
&lt;span id="cb20-28"&gt;&lt;a href="#cb20-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;prettyInst &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;MkInstMap&lt;/span&gt; (M.insert key (unsafeCoerce dict) prevInst) &lt;span class="kw"&gt;in&lt;/span&gt; &lt;/span&gt;
&lt;span id="cb20-29"&gt;&lt;a href="#cb20-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Crucially, though, the boilerplate involved in &lt;em&gt;using&lt;/em&gt; these
overridable instances is pretty minimal and most of the boilerplate when
defining these ‘classes’ could be automated with TemplateHaskell.&lt;/p&gt;
&lt;p&gt;New global instances only have to implement &lt;code&gt;HasPretty&lt;/code&gt;,
which is a tiny bit less ergonomic than &lt;code&gt;Pretty&lt;/code&gt;, since we
have to implement the dictionary, not the methods and there are no
default implementations.&lt;/p&gt;
&lt;div class="sourceCode" id="cb21"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb21-1"&gt;&lt;a href="#cb21-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;HasPretty&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb21-2"&gt;&lt;a href="#cb21-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    globalInst &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;PrettyDict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb21-3"&gt;&lt;a href="#cb21-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        _pretty &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb21-4"&gt;&lt;a href="#cb21-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only difference between a function that uses our overridable
&lt;code&gt;pretty&lt;/code&gt; and one that uses the regular &lt;code&gt;Pretty&lt;/code&gt;
type class is in the constraint, which changes from
&lt;code&gt;Pretty a&lt;/code&gt; to
&lt;code&gt;(Typeable a, HasPretty a, ?prettyInst :: InstMap)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We could try to factor this out to a type synonym.&lt;/p&gt;
&lt;div class="sourceCode" id="cb22"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb22-1"&gt;&lt;a href="#cb22-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Pretty&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; (&lt;span class="dt"&gt;Typeable&lt;/span&gt; a, &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a, &lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thereby completely eliminating any additonal boilerplate when using
&lt;code&gt;pretty&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Let’s rewrite &lt;code&gt;pretty&lt;/code&gt; with a &lt;code&gt;Pretty a&lt;/code&gt;
constraint instead of the more complicated
&lt;code&gt;(Typeable a, HasPretty a, ?prettyInst :: InstMap)&lt;/code&gt;. After
all, &lt;code&gt;Pretty&lt;/code&gt; is just a type synonym, so this should mean
exactly the same thing, right? …&lt;em&gt;right?&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="it-all-comes-tumbling-down"&gt;It all comes tumbling down&lt;/h2&gt;
&lt;div class="sourceCode" id="cb23"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb23-1"&gt;&lt;a href="#cb23-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;pretty ::&lt;/span&gt; &lt;span class="dt"&gt;Pretty&lt;/span&gt; a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-2"&gt;&lt;a href="#cb23-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;pretty &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-3"&gt;&lt;a href="#cb23-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb23-4"&gt;&lt;a href="#cb23-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;λ&lt;span class="op"&gt;&gt;&lt;/span&gt; &lt;span class="op"&gt;:&lt;/span&gt;t pretty&lt;/span&gt;
&lt;span id="cb23-5"&gt;&lt;a href="#cb23-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;pretty ::&lt;/span&gt; (&lt;span class="dt"&gt;HasPretty&lt;/span&gt; a, &lt;span class="dt"&gt;Typeable&lt;/span&gt; a) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Uh oh. The &lt;code&gt;?prettyInst :: InstMap&lt;/code&gt; constraint just…
disappeared?&lt;/p&gt;
&lt;p&gt;What happened here, is that when resolving&lt;a href="#fn4"
class="footnote-ref" id="fnref4" role="doc-noteref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; the
type synonym, GHC tried to simplify the constraint and removed the
monomorphic &lt;code&gt;?prettyInst :: InstMap&lt;/code&gt; constraint, since an
instance was found in the global context.&lt;/p&gt;
&lt;p&gt;This obviously sounds like a bug, but I am not certain that it
actually is. In fact, the real bug is probably that we were able to
define a global instance for &lt;code&gt;IP&lt;/code&gt; in the first place.&lt;/p&gt;
&lt;p&gt;Okay, we are unable to factor out the
&lt;code&gt;(Typeable a, HasPretty a, ?prettyInst :: InstMap)&lt;/code&gt;
constraint with a type synonym. Since we have a custom
&lt;code&gt;HasPretty&lt;/code&gt; class anyway, we could try to include these as
superclasses in the style of &lt;a
href="https://blog.csongor.co.uk/opaque-constraint-synonyms"&gt;Opaque
constraint synonyms&lt;/a&gt; instead.&lt;/p&gt;
&lt;div class="sourceCode" id="cb24"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb24-1"&gt;&lt;a href="#cb24-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; (&lt;span class="dt"&gt;Typeable&lt;/span&gt; a, &lt;span class="dt"&gt;IP&lt;/span&gt; &lt;span class="st"&gt;&quot;prettyInst&quot;&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;…except this doesn’t work. GHC does not allow implicit parameters in
superclasses, even if we explicitly write them as &lt;code&gt;IP&lt;/code&gt; class
constraints.&lt;/p&gt;
&lt;p&gt;This is a reasonable restriction because the time at which
dictionaries with super classes are constructed can be quite
unpredictable, so an implicit parameter superclass constraint will
probably not contain the intended value, but it &lt;em&gt;is&lt;/em&gt; annoying
since we have to keep the &lt;code&gt;?prettyInst :: InstMap&lt;/code&gt; constraint
around.&lt;/p&gt;
&lt;p&gt;We could at least try to factor out &lt;code&gt;Typeable&lt;/code&gt; though.&lt;/p&gt;
&lt;div class="sourceCode" id="cb25"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb25-1"&gt;&lt;a href="#cb25-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Typeable&lt;/span&gt; a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-2"&gt;&lt;a href="#cb25-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This compiles and even runs correctly!&lt;/p&gt;
&lt;p&gt;…as long as we compile &lt;em&gt;with&lt;/em&gt; optimizations.&lt;a href="#fn5"
class="footnote-ref" id="fnref5" role="doc-noteref"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, factoring out the
&lt;code&gt;(Typeable a, HasPretty a, ?prettyInst :: InstMap)&lt;/code&gt;
constraint is not an option. Is there anything else we cannot do?&lt;/p&gt;
&lt;div class="sourceCode" id="cb26"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb26-1"&gt;&lt;a href="#cb26-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;f ::&lt;/span&gt; (&lt;span class="dt"&gt;Typeable&lt;/span&gt; a, &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a, &lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;prettyInst ::&lt;/span&gt; &lt;span class="dt"&gt;InstMap&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb26-2"&gt;&lt;a href="#cb26-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;f &lt;span class="ot"&gt;=&lt;/span&gt; pretty&lt;/span&gt;
&lt;span id="cb26-3"&gt;&lt;a href="#cb26-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb26-4"&gt;&lt;a href="#cb26-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;g x &lt;span class="ot"&gt;=&lt;/span&gt; f x&lt;/span&gt;
&lt;span id="cb26-5"&gt;&lt;a href="#cb26-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb26-6"&gt;&lt;a href="#cb26-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;λ&lt;span class="op"&gt;&gt;&lt;/span&gt; &lt;span class="op"&gt;:&lt;/span&gt;t g&lt;/span&gt;
&lt;span id="cb26-7"&gt;&lt;a href="#cb26-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;g ::&lt;/span&gt; (&lt;span class="dt"&gt;Typeable&lt;/span&gt; a, &lt;span class="dt"&gt;HasPretty&lt;/span&gt; a) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb26-8"&gt;&lt;a href="#cb26-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb26-9"&gt;&lt;a href="#cb26-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb26-10"&gt;&lt;a href="#cb26-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb26-11"&gt;&lt;a href="#cb26-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- I am using instances for `Bool` here since we haven&#39;t defined a &lt;/span&gt;&lt;/span&gt;
&lt;span id="cb26-12"&gt;&lt;a href="#cb26-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- global instance for `HasPretty Bool` yet.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb26-13"&gt;&lt;a href="#cb26-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; (withPretty (&lt;span class="dt"&gt;PrettyDict&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt;) (f &lt;span class="dt"&gt;True&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb26-14"&gt;&lt;a href="#cb26-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; (withPretty (&lt;span class="dt"&gt;PrettyDict&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt;) (g &lt;span class="dt"&gt;True&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb27"&gt;&lt;pre
class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb27-1"&gt;&lt;a href="#cb27-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;$&lt;/span&gt; ghc Main.hs &lt;span class="kw"&gt;&amp;&amp;&lt;/span&gt; &lt;span class="ex"&gt;./Main&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb27-2"&gt;&lt;a href="#cb27-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;[1&lt;/span&gt; of 1] Compiling Main             &lt;span class="er"&gt;(&lt;/span&gt; &lt;span class="ex"&gt;Main.hs,&lt;/span&gt; Main.o &lt;span class="kw"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb27-3"&gt;&lt;a href="#cb27-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;Linking&lt;/span&gt; Main ...&lt;/span&gt;
&lt;span id="cb27-4"&gt;&lt;a href="#cb27-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb27-5"&gt;&lt;a href="#cb27-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;Main:&lt;/span&gt; pretty: No instance found at runtime&lt;/span&gt;
&lt;span id="cb27-6"&gt;&lt;a href="#cb27-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;CallStack&lt;/span&gt; &lt;span class="er"&gt;(&lt;/span&gt;&lt;span class="ex"&gt;from&lt;/span&gt; HasCallStack&lt;span class="kw"&gt;)&lt;/span&gt;&lt;span class="bu"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb27-7"&gt;&lt;a href="#cb27-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="ex"&gt;error,&lt;/span&gt; called at Main.hs:55:18 in main:Main&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oh, come on!&lt;/p&gt;
&lt;p&gt;As it turns out, when inferring the type for &lt;code&gt;g&lt;/code&gt;, GHC
omits the implicit parameter constraint and instead hard wires the empty
instance map from the global instance.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;withPretty&lt;/code&gt; still inserts a &lt;code&gt;HasPretty&lt;/code&gt;
instance, so the compiler cannot stop us from calling &lt;code&gt;g&lt;/code&gt; and
crashing at runtime.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We are able to replace type classes with overridable
&lt;code&gt;ImplicitParams&lt;/code&gt; and runtime type information based
dispatch.&lt;/li&gt;
&lt;li&gt;We can recover type safety, by using fake constraints for an empty
class so that incoherence is not an issue.&lt;/li&gt;
&lt;li&gt;To get proper global instances, we can extend the previously empty
class with a base implementation. We only ever use this implementation
if we are absolutely sure no local instance exists, so this is also
safe.&lt;/li&gt;
&lt;li&gt;Unfortunately, the global &lt;code&gt;ImplicitParams&lt;/code&gt; instance makes
&lt;code&gt;?prettyInst&lt;/code&gt; constraints extremely brittle and mistakes like
forgetting a type signature can remove the parameter and lead to runtime
crashes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To safely use this, we &lt;em&gt;always&lt;/em&gt; have to make sure to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type out the entire
&lt;code&gt;(Typeable a, HasPretty a, ?prettyInst :: InstMap)&lt;/code&gt;
constraint&lt;/li&gt;
&lt;li&gt;write a type signature whenever it might include
&lt;code&gt;?prettyInst&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, should you ever use any of this in anything that you might
possibly not want to break?&lt;/p&gt;
&lt;p&gt;Of course not. Global implicit parameters seem to be mostly uncharted
territory and I’m pretty sure their mere existence constitutes a
bug.&lt;/p&gt;
&lt;p&gt;Still, screwing around with broken features and pushing the limits of
Haskell is fun. I had a blast writing this and I hope it was enjoyable
to read as well! Maybe you even learned something today?&lt;/p&gt;
&lt;aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you have not already, you should probably read &lt;a
href="/posts/unsafeCoerceDict.html"&gt;that post&lt;/a&gt; first to understand
the context of this and what ‘incoherence’ even means.&lt;a href="#fnref1"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;As far as I can tell, the reason for this is to aid type
inference. Without this dependency, GHC would be unable to figure out
the type of &lt;code&gt;?x&lt;/code&gt; even when a &lt;code&gt;(?x :: Int)&lt;/code&gt;
constraint is in scope. This is a little frustrating though, since the
functional dependency is a bit of a lie. The type of &lt;code&gt;x&lt;/code&gt; is
not &lt;em&gt;really&lt;/em&gt; only determined by its name. It is determined by its
name and the instance in the surrounding context, but GHC cannot express
that so it cheats and invents a functional dependency.&lt;a href="#fnref2"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;The terminology is a bit confusing here.
&lt;code&gt;TypeRep&lt;/code&gt; in &lt;code&gt;Data.Typeable&lt;/code&gt; is just a
representation of regular compile-time types, that is carried in
&lt;code&gt;Typeable&lt;/code&gt; constraints at runtime, not about the runtime
representation of values as in &lt;code&gt;type role representational&lt;/code&gt;.
Concretely this means, that newtypes like &lt;code&gt;Int&lt;/code&gt; and
&lt;code&gt;Sum Int&lt;/code&gt; will have the same runtime representation, but
their &lt;code&gt;TypeRep&lt;/code&gt;s will be different.&lt;a href="#fnref3"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;The issue might have already happened when
&lt;em&gt;defining&lt;/em&gt; the type synonym. I’m not sure but the end result is
the same either way.&lt;a href="#fnref4" class="footnote-back"
role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Yeah…&lt;a href="#fnref5" class="footnote-back"
role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;</description>
</item><item>
    <title>Faking Local Instances with unsafeCoerce Dict</title>
    <link>https://prophetlabs.de/posts/unsafeCoerceDict.html</link>
    <guid isPremaLink="true">https://prophetlabs.de/posts/unsafeCoerceDict.html</guid>
    <pubDate>2022-3-18</pubDate>
    <description>&lt;p&gt;When you first learned about Haskell’s &lt;code&gt;Monoid&lt;/code&gt; typeclass,
you were probably quite surprised to find out that there is no instance
for &lt;code&gt;Monoid Int&lt;/code&gt; in &lt;code&gt;base&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After all, &lt;code&gt;(+)&lt;/code&gt; is an associative binary operation, and
&lt;code&gt;0&lt;/code&gt; acts as a unit element.&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Semigroup&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    (&lt;span class="op"&gt;&lt;&gt;&lt;/span&gt;) &lt;span class="ot"&gt;=&lt;/span&gt; (&lt;span class="op"&gt;+&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Monoid&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;mempty&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason, as you will have learned is that this is not the
&lt;em&gt;only&lt;/em&gt; possible instance for &lt;code&gt;Monoid Int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following instance is, in fact, just as valid.&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Semigroup&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    (&lt;span class="op"&gt;&lt;&gt;&lt;/span&gt;) &lt;span class="ot"&gt;=&lt;/span&gt; (&lt;span class="op"&gt;*&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Monoid&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;mempty&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might also be aware, that the way to work around this is to
declare newtype wrappers and to wrap and unwrap all &lt;code&gt;Int&lt;/code&gt;s
every time the Monoid instance is needed.&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Sum&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Sum&lt;/span&gt; {&lt;span class="ot"&gt;getSum ::&lt;/span&gt; a}&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Product&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Product&lt;/span&gt; {&lt;span class="ot"&gt;getProduct ::&lt;/span&gt; a}&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; (&lt;span class="dt"&gt;Num&lt;/span&gt; a) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;Semigroup&lt;/span&gt; (&lt;span class="dt"&gt;Sum&lt;/span&gt; a) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    (&lt;span class="dt"&gt;Sum&lt;/span&gt; x) &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; (&lt;span class="dt"&gt;Sum&lt;/span&gt; y) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Sum&lt;/span&gt; (x &lt;span class="op"&gt;+&lt;/span&gt; y)&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; (&lt;span class="dt"&gt;Num&lt;/span&gt; a) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;Monoid&lt;/span&gt; (&lt;span class="dt"&gt;Sum&lt;/span&gt; a) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;mempty&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Sum&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; (&lt;span class="dt"&gt;Num&lt;/span&gt; a) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;Semigroup&lt;/span&gt; (&lt;span class="dt"&gt;Product&lt;/span&gt; a) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    (&lt;span class="dt"&gt;Product&lt;/span&gt; x) &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; (&lt;span class="dt"&gt;Product&lt;/span&gt; y) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Product&lt;/span&gt; (x &lt;span class="op"&gt;*&lt;/span&gt; y)&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; (&lt;span class="dt"&gt;Num&lt;/span&gt; a) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;Monoid&lt;/span&gt; (&lt;span class="dt"&gt;Product&lt;/span&gt; a) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a href="#cb3-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;mempty&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Product&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a href="#cb3-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a href="#cb3-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;λ&lt;span class="op"&gt;&gt;&lt;/span&gt; getSum &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;foldMap&lt;/span&gt; &lt;span class="dt"&gt;Sum&lt;/span&gt; [&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;..&lt;/span&gt;&lt;span class="dv"&gt;10&lt;/span&gt;] &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; &lt;span class="dt"&gt;Sum&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-15"&gt;&lt;a href="#cb3-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;60&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is a bit of boilerplate involved in defining the newtypes and
corresponding instances, but what is hard to swallow is that quite a bit
of boilerplate has to be included at &lt;em&gt;every single use site&lt;/em&gt;.&lt;a
href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If Haskell had local instances, this would not be an issue since we
would not be forced to commit to a single instance and could just tell
the compiler the instance we want without having to constantly wrap and
unwrap everything.&lt;a href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introducing-dict"&gt;Introducing &lt;code&gt;Dict&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;GHC uses a technique called &lt;em&gt;dictionary passing&lt;/em&gt; to compile
typeclass dictionaries. This means that in Core (GHC’s intermediate
language), &lt;code&gt;=&gt;&lt;/code&gt; is turned into &lt;code&gt;-&gt;&lt;/code&gt;. In
other words, &lt;em&gt;constraints become arguments&lt;/em&gt;, called
&lt;em&gt;dictionaries&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Why is that useful to know? Well, while there is no way to directly
access or construct these dictionaries, we &lt;em&gt;can&lt;/em&gt; reify them with
&lt;code&gt;Dict&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (&lt;span class="ot"&gt;c ::&lt;/span&gt; &lt;span class="dt"&gt;Constraint&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; c &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because the constraint &lt;code&gt;c&lt;/code&gt; appears in the type signature
of the &lt;code&gt;Dict&lt;/code&gt; constructor, the constructor stores the
corresponding dictionary, and whenever it is scrutinized in a pattern
match, the constraint is made available.&lt;/p&gt;
&lt;p&gt;Unfortunately, even with &lt;code&gt;Dict&lt;/code&gt;, there is no way to
construct a dictionary without defining an instance first.&lt;/p&gt;
&lt;p&gt;The only way to construct a ‘local’ instance then is to define an
instance for a newtype wrapper, but if we create a Dict from that
instance, we cannot use the newtype &lt;code&gt;Dict&lt;/code&gt; for our original
type, because &lt;code&gt;Dict (Monoid Int)&lt;/code&gt; and
&lt;code&gt;Dict (Monoid (Sum Int))&lt;/code&gt; are entirely separate types to the
typechecker.&lt;/p&gt;
&lt;p&gt;We hit quite the wall there. We know we could use the Dict for our
newtype, and we know it would be safe&lt;a href="#fn3" class="footnote-ref"
id="fnref3" role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; because newtypes are
erased at runtime, but the typechecker doesn’t allow us to use a newtype
Dict to get an instance for the original type.&lt;/p&gt;
&lt;p&gt;If there was just some way to bypass the typechecker…&lt;/p&gt;
&lt;h2 id="i-solemnly-swear-i-am-up-to-no-good"&gt;I solemnly swear I am up to
no good&lt;/h2&gt;
&lt;p&gt;Luckily for us: there is!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unsafeCoerce :: forall a b. a -&gt; b&lt;/code&gt; lets us bypass the
typechecker by treating a value of &lt;em&gt;any&lt;/em&gt; (lifted) type as a value
of &lt;em&gt;any other&lt;/em&gt; (lifted) type.&lt;/p&gt;
&lt;p&gt;This is probably one of the most dangerous, if not &lt;em&gt;the&lt;/em&gt; most
dangerous function in GHC’s arsenal. If you’re not careful, you can
easily end up with segmentation faults.&lt;/p&gt;
&lt;p&gt;We know what we’re doing though, so let’s try it out!&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;monoidSumDict ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (&lt;span class="dt"&gt;Monoid&lt;/span&gt; (&lt;span class="dt"&gt;Sum&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;monoidSumDict &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;monoidIntDict ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (&lt;span class="dt"&gt;Monoid&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;monoidIntDict &lt;span class="ot"&gt;=&lt;/span&gt; unsafeCoerce monoidSumDict&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- If we didn&#39;t include the type signature, GHC would be confused about the type of number we&#39;re using&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;λ&lt;span class="op"&gt;&gt;&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; monoidIntDict &lt;span class="kw"&gt;of&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; fold [&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;..&lt;/span&gt;&lt;span class="dv"&gt;10&lt;/span&gt;] &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; (&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;60&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perfect! We just created an instance of &lt;code&gt;Monoid Int&lt;/code&gt;, that
only exists if we pattern match on &lt;code&gt;monoidIntDict&lt;/code&gt;. This
sounds a lot like local instances to me.&lt;/p&gt;
&lt;h2 id="lets-simplify-this"&gt;Let’s simplify this&lt;/h2&gt;
&lt;p&gt;What we have so far is already pretty cool, but having to write out a
pattern match every time is a bit inconvenient.&lt;/p&gt;
&lt;p&gt;Fortunately, we can easily factor out the pattern match by turning it
into a function.&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withDict ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; c &lt;span class="ot"&gt;-&gt;&lt;/span&gt; (c &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withDict d x &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; d &lt;span class="kw"&gt;of&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; x&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;λ&lt;span class="op"&gt;&gt;&lt;/span&gt; withDict monoidIntDict &lt;span class="op"&gt;$&lt;/span&gt; fold [&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;..&lt;/span&gt;&lt;span class="dv"&gt;10&lt;/span&gt;] &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; (&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;60&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That &lt;code&gt;(c =&gt; a)&lt;/code&gt; argument might look a bit strange, but
this is exactly what we’re trying to do: Take a value or function with a
constraint and remove that constraint by inserting the instance stored
in our &lt;code&gt;Dict&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can do even better. The only way to construct one of our ‘local’
Dicts is to create a &lt;code&gt;Dict&lt;/code&gt; for a newtype and cast that to a
&lt;code&gt;Dict&lt;/code&gt; for the original type using &lt;code&gt;unsafeCoerce&lt;/code&gt;,
but users of our library really shouldn’t have to write their own
&lt;code&gt;Dict&lt;/code&gt; definition, let alone use
&lt;code&gt;unsafeCoerce&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withLocal ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; c1 c2 d&lt;span class="op"&gt;.&lt;/span&gt; c1 &lt;span class="ot"&gt;=&gt;&lt;/span&gt; (c2 &lt;span class="ot"&gt;=&gt;&lt;/span&gt; d) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; d&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withLocal x &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; c2Dict &lt;span class="kw"&gt;of&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; x&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;        c1Dict ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; c1&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        c1Dict &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;        c2Dict ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; c2&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        c2Dict &lt;span class="ot"&gt;=&lt;/span&gt; unsafeCoerce c1Dict &lt;/span&gt;
&lt;span id="cb7-8"&gt;&lt;a href="#cb7-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-9"&gt;&lt;a href="#cb7-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;λ&lt;span class="op"&gt;&gt;&lt;/span&gt; withLocal &lt;span class="op"&gt;@&lt;/span&gt;(&lt;span class="dt"&gt;Monoid&lt;/span&gt; (&lt;span class="dt"&gt;Sum&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)) &lt;span class="op"&gt;@&lt;/span&gt;(&lt;span class="dt"&gt;Monoid&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="op"&gt;$&lt;/span&gt; fold [&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;..&lt;/span&gt;&lt;span class="dv"&gt;10&lt;/span&gt;] &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; (&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb7-10"&gt;&lt;a href="#cb7-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;60&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, all that users have to do is supply the right type applications
and &lt;code&gt;withLocal&lt;/code&gt; is going to do everything else for them.
Nice!&lt;/p&gt;
&lt;h2 id="hey-google-whats-a-segfault"&gt;Hey Google, what’s a segfault?&lt;/h2&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;λ&lt;span class="op"&gt;&gt;&lt;/span&gt; withLocal &lt;span class="op"&gt;@&lt;/span&gt;(&lt;span class="dt"&gt;Eq&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;) &lt;span class="op"&gt;@&lt;/span&gt;(&lt;span class="dt"&gt;Num&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="op"&gt;$&lt;/span&gt; (&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fish&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Job&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;, &#39;ghci unsafeCoerceDict&lt;span class="op"&gt;.&lt;/span&gt;hs&#39; terminated by signal &lt;span class="dt"&gt;SIGSEGV&lt;/span&gt; (&lt;span class="dt"&gt;Address&lt;/span&gt; boundary &lt;span class="fu"&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oh no&lt;a href="#fn4" class="footnote-ref" id="fnref4"
role="doc-noteref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;…&lt;/p&gt;
&lt;p&gt;We just used &lt;code&gt;unsafeCoerce&lt;/code&gt; to cast a
&lt;code&gt;Dict (Eq Bool)&lt;/code&gt; to a &lt;code&gt;Dict (Num Int)&lt;/code&gt;. We really
shouldn’t be able to do this.&lt;/p&gt;
&lt;p&gt;The issue here is that &lt;code&gt;withLocal&lt;/code&gt; places no constraints
on the — well — &lt;em&gt;constraints&lt;/em&gt; (&lt;code&gt;c1&lt;/code&gt; and
&lt;code&gt;c2&lt;/code&gt;). In reality, we need both constraints to contain the
same typeclass and to only differ in the &lt;em&gt;argument&lt;/em&gt; to that
class.&lt;/p&gt;
&lt;p&gt;Let’s do that.&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withLocal ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; c a b d&lt;span class="op"&gt;.&lt;/span&gt; (c a) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; (c b &lt;span class="ot"&gt;=&gt;&lt;/span&gt; d) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; d&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withLocal x &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; cbDict &lt;span class="kw"&gt;of&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; x&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;        caDict ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (c a)&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        caDict &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;        cbDict ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (c b)&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        cbDict &lt;span class="ot"&gt;=&lt;/span&gt; unsafeCoerce caDict &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we did not change anything about the implementation. We
just constrained its type signature.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;code&gt;withLocal&lt;/code&gt; can still segfault because
there are still no constraints on &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. We
could, for instance, still try to convert a &lt;code&gt;Monoid String&lt;/code&gt;
to a &lt;code&gt;Monoid Int&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="why-did-this-even-work-before"&gt;Why did this even work
before?&lt;/h2&gt;
&lt;p&gt;The reason why this function is safe on &lt;code&gt;Sum Int&lt;/code&gt; and
&lt;code&gt;Int&lt;/code&gt; is that &lt;code&gt;Sum Int&lt;/code&gt; is just a newtype wrapper
over &lt;code&gt;Int&lt;/code&gt;, and newtypes are completely erased at runtime. So
a function of type &lt;code&gt;Sum Int -&gt; b&lt;/code&gt; really becomes a
function of type &lt;code&gt;Int -&gt; b&lt;/code&gt; at runtime.&lt;/p&gt;
&lt;p&gt;Thus we can safely&lt;a href="#fn5" class="footnote-ref" id="fnref5"
role="doc-noteref"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; cast it to &lt;code&gt;Int -&gt; b&lt;/code&gt;
using &lt;code&gt;unsafeCoerce&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt; don’t have the same runtime
representation, so we cannot safely cast
&lt;code&gt;Dict (Monoid String)&lt;/code&gt; to &lt;code&gt;Dict (Monoid Int)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately for us, Haskell does actually provide a way to constrain
a function to types with the same runtime representation:
&lt;code&gt;Coercible&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;If we adjust our function to include a &lt;code&gt;Coercible a b&lt;/code&gt;
constraint, we finally end up with a safe implementation that doesn’t
segfault!&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withLocal ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; c a b d&lt;span class="op"&gt;.&lt;/span&gt; (c a, &lt;span class="dt"&gt;Coercible&lt;/span&gt; a b) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; (c b &lt;span class="ot"&gt;=&gt;&lt;/span&gt; d) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; d&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withLocal x &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; cbDict &lt;span class="kw"&gt;of&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; x&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-4"&gt;&lt;a href="#cb10-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;        caDict ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (c a)&lt;/span&gt;
&lt;span id="cb10-5"&gt;&lt;a href="#cb10-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        caDict &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-6"&gt;&lt;a href="#cb10-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;        cbDict ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; (c b)&lt;/span&gt;
&lt;span id="cb10-7"&gt;&lt;a href="#cb10-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        cbDict &lt;span class="ot"&gt;=&lt;/span&gt; unsafeCoerce caDict &lt;/span&gt;
&lt;span id="cb10-8"&gt;&lt;a href="#cb10-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-9"&gt;&lt;a href="#cb10-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;λ&lt;span class="op"&gt;&gt;&lt;/span&gt; withLocal &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;Monoid&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;(&lt;span class="dt"&gt;Sum&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; fold [&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;..&lt;/span&gt;&lt;span class="dv"&gt;10&lt;/span&gt;] &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; (&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb10-10"&gt;&lt;a href="#cb10-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;60&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we still had to use &lt;code&gt;unsafeCoerce&lt;/code&gt; instead of
&lt;code&gt;coerce&lt;/code&gt;. Just because &lt;code&gt;a&lt;/code&gt; can be coerced to
&lt;code&gt;b&lt;/code&gt;, doesn’t mean GHC will allow you to cast
&lt;code&gt;Dict (c a)&lt;/code&gt; to &lt;code&gt;Dict (c b)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="expanding"&gt;Expanding&lt;/h2&gt;
&lt;p&gt;What we have so far is already pretty cool, but we can do even
better.&lt;/p&gt;
&lt;p&gt;So far, all our local instances were limited by us having to write an
instance for a newtype wrapper and so our instances could not include
entirely arbitrary functions.&lt;/p&gt;
&lt;p&gt;We couldn’t, for example, declare a local function depending on a
local variable and use that in an instance, because instances have to be
written at the top level and therefore can’t include local
variables.&lt;/p&gt;
&lt;p&gt;Fortunately, by selling a bit more of our soul to the type checker,
we can work around this limitation!&lt;/p&gt;
&lt;p&gt;At runtime, dictionaries (not &lt;code&gt;Dict&lt;/code&gt;s) are really just
regular data types, so there is no reason, why we shouldn’t be able to
fake them with &lt;code&gt;unsafeCoerce&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note, that &lt;code&gt;Dict&lt;/code&gt; actually stores the runtime dictionary
as a lifted field, so if we want to coerce to &lt;code&gt;Dict&lt;/code&gt;, we need
to add a layer of indirection.&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;FakeDict&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;FakeDict&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now for the runtime dictionary, let’s look at the definition of the
&lt;code&gt;Eq&lt;/code&gt; typeclass.&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Eq&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;  (==) ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;  (/=) ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="ot"&gt;{-# MINIMAL (==) | (/=) #-}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Eq&lt;/code&gt; has two methods &lt;code&gt;(==)&lt;/code&gt; and
&lt;code&gt;(/=)&lt;/code&gt;, so our datatype also has to have two fields with
matching types.&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;EqDict&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;EqDict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;        _eq  ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-3"&gt;&lt;a href="#cb13-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt;   _neq ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-4"&gt;&lt;a href="#cb13-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need a function to make &lt;code&gt;unsafeCoere&lt;/code&gt; a little less
unsafe.&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withFakeDictUnsafe ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; c d a&lt;span class="op"&gt;.&lt;/span&gt; d &lt;span class="ot"&gt;-&gt;&lt;/span&gt; (c &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withFakeDictUnsafe d x &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; unsafeCoerce (&lt;span class="dt"&gt;FakeDict&lt;/span&gt; d)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; c &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-3"&gt;&lt;a href="#cb14-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This already works for simple classes like &lt;code&gt;Eq&lt;/code&gt;, but right
now we can’t handle classes with superclasses like &lt;code&gt;Monoid&lt;/code&gt;,
because we have no way of storing the superclass dictionary in our fake
dictionary.&lt;/p&gt;
&lt;p&gt;In order to include the dictionary, we have to expand our
&lt;code&gt;MonoidDict&lt;/code&gt; to a GADT.&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb15-1"&gt;&lt;a href="#cb15-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;MonoidDict&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-2"&gt;&lt;a href="#cb15-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;MonoidDict&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Semigroup&lt;/span&gt; a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb15-3"&gt;&lt;a href="#cb15-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;        _mempty  ::&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb15-4"&gt;&lt;a href="#cb15-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt;   _mappend ::&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb15-5"&gt;&lt;a href="#cb15-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt;   _mconcat ::&lt;/span&gt; [a] &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;/span&gt;
&lt;span id="cb15-6"&gt;&lt;a href="#cb15-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    } &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;MonoidDict&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And… that’s it!&lt;/p&gt;
&lt;p&gt;We can now actually write useful functions that we couldn’t just
emulate by wrapping everything in a newtype.&lt;/p&gt;
&lt;p&gt;As an example, let’s consider a function that (locally) implements a
&lt;code&gt;Monoid&lt;/code&gt; instance for a type, which only implements
&lt;code&gt;Semigroup&lt;/code&gt;, based on a provided default argument for
&lt;code&gt;mempty&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb16-1"&gt;&lt;a href="#cb16-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withSemigroupAsMonoid ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a b&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Semigroup&lt;/span&gt; a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; (&lt;span class="dt"&gt;Monoid&lt;/span&gt; a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id="cb16-2"&gt;&lt;a href="#cb16-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withSemigroupAsMonoid d &lt;span class="ot"&gt;=&lt;/span&gt; withFakeDictUnsafe &lt;span class="op"&gt;@&lt;/span&gt;(&lt;span class="dt"&gt;Monoid&lt;/span&gt; a) (&lt;span class="dt"&gt;MonoidDict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb16-3"&gt;&lt;a href="#cb16-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        _mempty  &lt;span class="ot"&gt;=&lt;/span&gt; d&lt;/span&gt;
&lt;span id="cb16-4"&gt;&lt;a href="#cb16-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,   _mappend &lt;span class="ot"&gt;=&lt;/span&gt; (&lt;span class="op"&gt;&lt;&gt;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb16-5"&gt;&lt;a href="#cb16-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,   _mconcat &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;foldr&lt;/span&gt; (&lt;span class="op"&gt;&lt;&gt;&lt;/span&gt;) d&lt;/span&gt;
&lt;span id="cb16-6"&gt;&lt;a href="#cb16-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    })&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We couldn’t use a newtype instance, since
&lt;code&gt;withSemigroupAsMonoid&lt;/code&gt; uses the function parameter
&lt;code&gt;d&lt;/code&gt; in its instance definition.&lt;/p&gt;
&lt;h2 id="template-haskell"&gt;Template Haskell&lt;/h2&gt;
&lt;p&gt;Writing all these Dict types by hand is not just annoying, but also
quite dangerous because they are not automatically kept in sync with the
corresponding type classes, so if one of those changes and we forget to
update the Dict, the types are not actually compatible anymore.&lt;/p&gt;
&lt;p&gt;We can use some TemplateHaskell to automate the process and
(hopefully) avoid further segfaults.&lt;/p&gt;
&lt;p&gt;My experience with TemplateHaskell is pretty limited, so I’m not
going to pretend like this is a great implementation.&lt;a href="#fn6"
class="footnote-ref" id="fnref6" role="doc-noteref"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb17-1"&gt;&lt;a href="#cb17-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;makeDict ::&lt;/span&gt; &lt;span class="dt"&gt;Name&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Q&lt;/span&gt; [&lt;span class="dt"&gt;Dec&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb17-2"&gt;&lt;a href="#cb17-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;makeDict cname &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-3"&gt;&lt;a href="#cb17-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    reify cname &lt;span class="op"&gt;&gt;&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="co"&gt;-- (1)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-4"&gt;&lt;a href="#cb17-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;ClassI&lt;/span&gt; cdec is &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; cdec &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-5"&gt;&lt;a href="#cb17-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;ClassD&lt;/span&gt; cxt cname tvs _ meths &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="fu"&gt;pure&lt;/span&gt; [&lt;/span&gt;
&lt;span id="cb17-6"&gt;&lt;a href="#cb17-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                        dataCon [] dname tvs &lt;span class="dt"&gt;Nothing&lt;/span&gt; [&lt;span class="dt"&gt;ForallC&lt;/span&gt; (&lt;span class="fu"&gt;map&lt;/span&gt; (addSpecificity &lt;span class="dt"&gt;SpecifiedSpec&lt;/span&gt;) tvs) cxt &lt;/span&gt;
&lt;span id="cb17-7"&gt;&lt;a href="#cb17-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                            &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;RecGadtC&lt;/span&gt; [dname] (&lt;span class="fu"&gt;map&lt;/span&gt; methodToVarBangType meths) appliedFakeType] [] &lt;span class="co"&gt;-- (2)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-8"&gt;&lt;a href="#cb17-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    ]&lt;/span&gt;
&lt;span id="cb17-9"&gt;&lt;a href="#cb17-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-10"&gt;&lt;a href="#cb17-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    dataCon &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; (meths, cxt) &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-11"&gt;&lt;a href="#cb17-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                        ([_], []) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; \cxt name tvs k [cs] ds &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;NewtypeD&lt;/span&gt; cxt name tvs k cs ds &lt;span class="co"&gt;-- (4)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-12"&gt;&lt;a href="#cb17-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                        _ &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;DataD&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-13"&gt;&lt;a href="#cb17-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    dname &lt;span class="ot"&gt;=&lt;/span&gt; mkName &lt;span class="op"&gt;$&lt;/span&gt; nameBase cname &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; &lt;span class="st"&gt;&quot;Dict&quot;&lt;/span&gt; &lt;span class="co"&gt;-- (3)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-14"&gt;&lt;a href="#cb17-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    &lt;/span&gt;
&lt;span id="cb17-15"&gt;&lt;a href="#cb17-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    methodToVarBangType (&lt;span class="dt"&gt;SigD&lt;/span&gt; n t) &lt;span class="ot"&gt;=&lt;/span&gt; (mkName (&lt;span class="st"&gt;&quot;_&quot;&lt;/span&gt; &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; nameBase n), &lt;span class="dt"&gt;Bang&lt;/span&gt; &lt;span class="dt"&gt;SourceNoUnpack&lt;/span&gt; &lt;span class="dt"&gt;NoSourceStrictness&lt;/span&gt;, t)&lt;/span&gt;
&lt;span id="cb17-16"&gt;&lt;a href="#cb17-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    &lt;/span&gt;
&lt;span id="cb17-17"&gt;&lt;a href="#cb17-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    appliedFakeType  &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;foldl&lt;/span&gt; &lt;span class="dt"&gt;AppT&lt;/span&gt; (&lt;span class="dt"&gt;ConT&lt;/span&gt; dname) (&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="dt"&gt;VarT&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt; tyVarName) tvs)&lt;/span&gt;
&lt;span id="cb17-18"&gt;&lt;a href="#cb17-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    appliedClassType &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;foldl&lt;/span&gt; &lt;span class="dt"&gt;AppT&lt;/span&gt; (&lt;span class="dt"&gt;ConT&lt;/span&gt; cname) (&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="dt"&gt;VarT&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt; tyVarName) tvs)&lt;/span&gt;
&lt;span id="cb17-19"&gt;&lt;a href="#cb17-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-20"&gt;&lt;a href="#cb17-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    addSpecificity s (&lt;span class="dt"&gt;PlainTV&lt;/span&gt; n _) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;PlainTV&lt;/span&gt; n s&lt;/span&gt;
&lt;span id="cb17-21"&gt;&lt;a href="#cb17-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    addSpecificity s (&lt;span class="dt"&gt;KindedTV&lt;/span&gt; n _ k) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;KindedTV&lt;/span&gt; n s k&lt;/span&gt;
&lt;span id="cb17-22"&gt;&lt;a href="#cb17-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-23"&gt;&lt;a href="#cb17-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    tyVarName (&lt;span class="dt"&gt;PlainTV&lt;/span&gt; n _) &lt;span class="ot"&gt;=&lt;/span&gt; n&lt;/span&gt;
&lt;span id="cb17-24"&gt;&lt;a href="#cb17-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                    tyVarName (&lt;span class="dt"&gt;KindedTV&lt;/span&gt; n _ _) &lt;span class="ot"&gt;=&lt;/span&gt; n&lt;/span&gt;
&lt;span id="cb17-25"&gt;&lt;a href="#cb17-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            _ &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="fu"&gt;fail&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&quot;Not a class: &quot;&lt;/span&gt; &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; cname&lt;/span&gt;
&lt;span id="cb17-26"&gt;&lt;a href="#cb17-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        _ &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="fu"&gt;fail&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&quot;Not a class: &quot;&lt;/span&gt; &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; cname&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important steps are these:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;We get the class definition using &lt;code&gt;reify&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We can use that definition to construct a record GADT
(&lt;code&gt;RecGadtC&lt;/code&gt;) with one field for every class method.&lt;/li&gt;
&lt;li&gt;The new GADT is called &lt;code&gt;&lt;ClassName&gt;Dict&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If there is only a single method and no superclass, we construct a
newtype instead. Note that this step is not just an optimization, but
absolutely crucial, since a &lt;code&gt;data&lt;/code&gt; constructor has one more
level of indirection than a newtype, and confusing the two would lead to
a segfault.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We actually get another benefit from generating our instance. Since
we know, that using &lt;code&gt;withFakeDictUnsafe&lt;/code&gt; with our generated
&lt;code&gt;MonoidDict&lt;/code&gt; is safe, we can use a (non-exported) type class
and a function &lt;code&gt;withFakeDict&lt;/code&gt; to constrain arguments to
&lt;em&gt;safe&lt;/em&gt; (i.e. generated) dictionaries.&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb18-1"&gt;&lt;a href="#cb18-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;FakeDictFor&lt;/span&gt; (&lt;span class="ot"&gt;c ::&lt;/span&gt; &lt;span class="dt"&gt;Constraint&lt;/span&gt;) (&lt;span class="ot"&gt;d ::&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt;) &lt;span class="op"&gt;|&lt;/span&gt; d &lt;span class="ot"&gt;-&gt;&lt;/span&gt; c&lt;/span&gt;
&lt;span id="cb18-2"&gt;&lt;a href="#cb18-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb18-3"&gt;&lt;a href="#cb18-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withFakeDict ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; d c a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;FakeDictFor&lt;/span&gt; c d &lt;span class="ot"&gt;=&gt;&lt;/span&gt; d &lt;span class="ot"&gt;-&gt;&lt;/span&gt; (c &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb18-4"&gt;&lt;a href="#cb18-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withFakeDict &lt;span class="ot"&gt;=&lt;/span&gt; withFakeDictUnsafe&lt;/span&gt;
&lt;span id="cb18-5"&gt;&lt;a href="#cb18-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb18-6"&gt;&lt;a href="#cb18-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;makeDict ::&lt;/span&gt; &lt;span class="dt"&gt;Name&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Q&lt;/span&gt; [&lt;span class="dt"&gt;Dec&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb18-7"&gt;&lt;a href="#cb18-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;makeDict cname &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-8"&gt;&lt;a href="#cb18-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;{- ... -}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-9"&gt;&lt;a href="#cb18-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    [d|instance FakeDictFor $(pure appliedClassType) $(pure appliedFakeType)|]&lt;/span&gt;
&lt;span id="cb18-10"&gt;&lt;a href="#cb18-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;{- ... -}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="incoherence"&gt;Incoherence&lt;/h2&gt;
&lt;p&gt;Unfortunately, both &lt;code&gt;withLocal&lt;/code&gt; and
&lt;code&gt;withFakeDictUnsafe&lt;/code&gt; have a pretty serious flaw. Usually,
whenever we use a typeclass method in Haskell, there are essentially two
possibilities: either &lt;em&gt;no&lt;/em&gt; instance exists or there is
&lt;em&gt;exactly one&lt;/em&gt; and the compiler picks that one. This is called
&lt;em&gt;Coherence&lt;/em&gt; and is also the reason why all in-scope typeclass
instances are always exported from a module.&lt;/p&gt;
&lt;p&gt;The issue with our functions is that in case there is already an
instance for the typeclass, they introduce a second instance and break
the compiler’s Coherence assumption.&lt;/p&gt;
&lt;p&gt;As an example, let’s say we want to introduce a local instance for
&lt;code&gt;Show Int&lt;/code&gt;. If we do this, using &lt;code&gt;withLocal&lt;/code&gt;&lt;a
href="#fn7" class="footnote-ref" id="fnref7"
role="doc-noteref"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;, which instance is the compiler
going to pick? Let’s find out!&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb19-1"&gt;&lt;a href="#cb19-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;FancyShow&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;FancyShow&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb19-2"&gt;&lt;a href="#cb19-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Show&lt;/span&gt; a &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;Show&lt;/span&gt; (&lt;span class="dt"&gt;FancyShow&lt;/span&gt; a) &lt;span class="kw"&gt;where&lt;/span&gt; &lt;/span&gt;
&lt;span id="cb19-3"&gt;&lt;a href="#cb19-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;show&lt;/span&gt; (&lt;span class="dt"&gt;FancyShow&lt;/span&gt; x) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&quot;⭐&quot;&lt;/span&gt; &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; x &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; &lt;span class="st"&gt;&quot;⭐&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-4"&gt;&lt;a href="#cb19-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb19-5"&gt;&lt;a href="#cb19-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; withLocal &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;Show&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt;(&lt;span class="dt"&gt;FancyShow&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;print&lt;/span&gt; (&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre
class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb20-1"&gt;&lt;a href="#cb20-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;$&lt;/span&gt; ghc unsafeCoerceDict.hs &lt;span class="kw"&gt;&amp;&amp;&lt;/span&gt; &lt;span class="ex"&gt;./unsafeCoerceDict&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-2"&gt;&lt;a href="#cb20-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;[1&lt;/span&gt; of 1] Compiling Main             &lt;span class="er"&gt;(&lt;/span&gt; &lt;span class="ex"&gt;unsafeCoerceDict.hs,&lt;/span&gt; unsafeCoerceDict.o &lt;span class="kw"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb20-3"&gt;&lt;a href="#cb20-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;Linking&lt;/span&gt; unsafeCoerceDict ...&lt;/span&gt;
&lt;span id="cb20-4"&gt;&lt;a href="#cb20-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;⭐5⭐&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nice! It seems like we can override instances using
&lt;code&gt;withLocal&lt;/code&gt;. Let’s try that with optimizations&lt;/p&gt;
&lt;div class="sourceCode" id="cb21"&gt;&lt;pre
class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb21-1"&gt;&lt;a href="#cb21-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;$&lt;/span&gt; ghc &lt;span class="at"&gt;-O&lt;/span&gt; unsafeCoerceDict.hs &lt;span class="kw"&gt;&amp;&amp;&lt;/span&gt; &lt;span class="ex"&gt;./unsafeCoerceDict&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb21-2"&gt;&lt;a href="#cb21-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;[1&lt;/span&gt; of 1] Compiling Main             &lt;span class="er"&gt;(&lt;/span&gt; &lt;span class="ex"&gt;unsafeCoerceDict.hs,&lt;/span&gt; unsafeCoerceDict.o &lt;span class="kw"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb21-3"&gt;&lt;a href="#cb21-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;Linking&lt;/span&gt; unsafeCoerceDict ...&lt;/span&gt;
&lt;span id="cb21-4"&gt;&lt;a href="#cb21-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ex"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oh no… optimizations can change the semantics of our program by
picking the original instance, that we tried to override. We really
don’t want that.&lt;/p&gt;
&lt;p&gt;To make matters worse, there is no way to prevent incoherent usage
without having to include Template Haskell at call sites, since there is
no way to write a type like
&lt;code&gt;Not (Eq a) =&gt; (Eq a =&gt; b) -&gt; b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It’s not that bad though. As long as we make sure to never try to
override existing instances, we are safe.&lt;/p&gt;
&lt;h2 id="implicitparams"&gt;ImplicitParams&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;withFakeDict&lt;/code&gt; might remind you of a different Haskell
feature, namely &lt;code&gt;ImplicitParams&lt;/code&gt;. And indeed, we can directly
interoperate with &lt;code&gt;ImplicitParams&lt;/code&gt; using
&lt;code&gt;withFakeDict&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An implicit parameter constraint like&lt;/p&gt;
&lt;div class="sourceCode" id="cb22"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb22-1"&gt;&lt;a href="#cb22-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;f ::&lt;/span&gt; (&lt;span class="op"&gt;?&lt;/span&gt;&lt;span class="ot"&gt;x ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-2"&gt;&lt;a href="#cb22-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;f &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;x &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is really just syntactic sugar for&lt;/p&gt;
&lt;div class="sourceCode" id="cb23"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb23-1"&gt;&lt;a href="#cb23-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;f ::&lt;/span&gt; (&lt;span class="dt"&gt;IP&lt;/span&gt; &lt;span class="st"&gt;&quot;x&quot;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) &lt;span class="ot"&gt;=&gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-2"&gt;&lt;a href="#cb23-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;f &lt;span class="ot"&gt;=&lt;/span&gt; ip &lt;span class="op"&gt;@&lt;/span&gt;&lt;span class="st"&gt;&quot;x&quot;&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where IP is a regular type class defined in
&lt;code&gt;GHC.Classes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What’s really cool about this is that we can actually define an
&lt;code&gt;IP&lt;/code&gt; constraint using &lt;code&gt;withFakeDict&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So instead of&lt;/p&gt;
&lt;div class="sourceCode" id="cb24"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb24-1"&gt;&lt;a href="#cb24-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="op"&gt;?&lt;/span&gt;x &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt; &lt;span class="kw"&gt;in&lt;/span&gt; f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;we can write&lt;/p&gt;
&lt;div class="sourceCode" id="cb25"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb25-1"&gt;&lt;a href="#cb25-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;withFakeDict &lt;span class="op"&gt;@&lt;/span&gt;(&lt;span class="dt"&gt;IPDict&lt;/span&gt; &lt;span class="st"&gt;&quot;x&quot;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;) (&lt;span class="dt"&gt;IPDict&lt;/span&gt; {_ip &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;}) f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and get the exact same behavior!&lt;/p&gt;
&lt;p&gt;This means that &lt;code&gt;withFakeDict&lt;/code&gt; is strictly more powerful
than ImplicitParams, but it also shares ImplicitParams’ &lt;a
href="https://chrisdone.com/posts/whats-wrong-with-implicitparams/"&gt;somewhat
famous&lt;/a&gt; &lt;a
href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/implicit_parameters.html#implicit-parameters-and-polymorphic-recursion"&gt;issues&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="configurable-trace"&gt;Configurable trace&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Debug.Trace.trace&lt;/code&gt; can be a very useful function for
quick debugging. Want to know what this intermediate expression
evaluates to? Just write it to stderr using &lt;code&gt;trace&lt;/code&gt;. Want to
know what values this function is called with? You can use trace for
that.&lt;/p&gt;
&lt;div class="sourceCode" id="cb26"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb26-1"&gt;&lt;a href="#cb26-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;f ::&lt;/span&gt; &lt;span class="dt"&gt;A&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;B&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb26-2"&gt;&lt;a href="#cb26-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;f x &lt;span class="op"&gt;|&lt;/span&gt; trace (&lt;span class="st"&gt;&quot;x = &quot;&lt;/span&gt; &lt;span class="op"&gt;&lt;&gt;&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; x) &lt;span class="dt"&gt;False&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="st"&gt;&quot;unreachable&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb26-3"&gt;&lt;a href="#cb26-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;f x &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, &lt;code&gt;trace&lt;/code&gt; is not really suited for slightly
more permanent tracing, since there is no way to turn it off or to
change the target it writes to.&lt;/p&gt;
&lt;p&gt;If we wanted to improve trace, we would have to somehow pass a
configuration without &lt;em&gt;actually&lt;/em&gt; passing it manually to every
single function. Sounds a lot like type classes to me!&lt;/p&gt;
&lt;p&gt;Let’s try that. We should also probably use &lt;code&gt;Text&lt;/code&gt; instead
of &lt;code&gt;String&lt;/code&gt;, while we’re at it.&lt;/p&gt;
&lt;div class="sourceCode" id="cb27"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb27-1"&gt;&lt;a href="#cb27-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Trace&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb27-2"&gt;&lt;a href="#cb27-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    trace ::&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make filtering easier, we should probably also accept some kind of
trace level. We could just accept an integer, but parameterizing our
class over the type of the trace level is more general.&lt;/p&gt;
&lt;div class="sourceCode" id="cb28"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb28-1"&gt;&lt;a href="#cb28-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Trace&lt;/span&gt; lvl &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb28-2"&gt;&lt;a href="#cb28-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    trace ::&lt;/span&gt; lvl &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cool. Functions that want to perform logging now need an additional
&lt;code&gt;Trace lvl&lt;/code&gt; constraint, that supplies the actual
implementation.&lt;/p&gt;
&lt;p&gt;How do we pick the implementation though? If you’ve paid attention so
far, the answer should be obvious: We construct a fake dictionary using
&lt;code&gt;withFakeDict&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb29"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb29-1"&gt;&lt;a href="#cb29-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Trace&lt;/span&gt; lvl &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-2"&gt;&lt;a href="#cb29-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    trace ::&lt;/span&gt; lvl &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb29-3"&gt;&lt;a href="#cb29-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb29-4"&gt;&lt;a href="#cb29-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;makeDict &#39;&lt;span class="dt"&gt;&#39;Trace&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-5"&gt;&lt;a href="#cb29-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb29-6"&gt;&lt;a href="#cb29-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;runTraceStderr ::&lt;/span&gt; (&lt;span class="dt"&gt;Trace&lt;/span&gt; lvl &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb29-7"&gt;&lt;a href="#cb29-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;runTraceStderr &lt;span class="ot"&gt;=&lt;/span&gt; withFakeDict (&lt;span class="dt"&gt;TraceDict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb29-8"&gt;&lt;a href="#cb29-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        _trace _ &lt;span class="ot"&gt;=&lt;/span&gt; Debug.Trace.trace&lt;/span&gt;
&lt;span id="cb29-9"&gt;&lt;a href="#cb29-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    })&lt;/span&gt;
&lt;span id="cb29-10"&gt;&lt;a href="#cb29-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb29-11"&gt;&lt;a href="#cb29-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;ignoreTrace ::&lt;/span&gt; (&lt;span class="dt"&gt;Trace&lt;/span&gt; lvl &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb29-12"&gt;&lt;a href="#cb29-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ignoreTrace &lt;span class="ot"&gt;=&lt;/span&gt; withFakeDict (&lt;span class="dt"&gt;TraceDict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb29-13"&gt;&lt;a href="#cb29-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    _trace _ _ x &lt;span class="ot"&gt;=&lt;/span&gt; x&lt;/span&gt;
&lt;span id="cb29-14"&gt;&lt;a href="#cb29-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One issue that might still come up is that someone could
theoretically define a top-level instance of &lt;code&gt;Trace lvl&lt;/code&gt;,
which would introduce incoherence and completely break our system. To
prevent that, we can hide the actual implementation in a class
&lt;code&gt;_Trace&lt;/code&gt;, that we don’t actually export. We can then define a
type synonym &lt;code&gt;Trace&lt;/code&gt; that we &lt;em&gt;do&lt;/em&gt; export. This way,
users of our library can still reference Trace through our type synonym,
but cannot define top-level instances since instances cannot be defined
for type synonyms of type classes.&lt;/p&gt;
&lt;div class="sourceCode" id="cb30"&gt;&lt;pre
class="sourceCode hs"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb30-1"&gt;&lt;a href="#cb30-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; _Trace lvl &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb30-2"&gt;&lt;a href="#cb30-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    trace ::&lt;/span&gt; lvl &lt;span class="ot"&gt;-&gt;&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt; &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb30-3"&gt;&lt;a href="#cb30-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb30-4"&gt;&lt;a href="#cb30-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;makeDict &#39;&#39;_Trace&lt;/span&gt;
&lt;span id="cb30-5"&gt;&lt;a href="#cb30-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb30-6"&gt;&lt;a href="#cb30-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Trace&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; _Trace&lt;/span&gt;
&lt;span id="cb30-7"&gt;&lt;a href="#cb30-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb30-8"&gt;&lt;a href="#cb30-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;runTraceStderr ::&lt;/span&gt; (&lt;span class="dt"&gt;Trace&lt;/span&gt; lvl &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb30-9"&gt;&lt;a href="#cb30-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;runTraceStderr &lt;span class="ot"&gt;=&lt;/span&gt; withFakeDict (&lt;span class="dt"&gt;Trace_Dict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb30-10"&gt;&lt;a href="#cb30-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        _trace _ &lt;span class="ot"&gt;=&lt;/span&gt; Debug.Trace.trace&lt;/span&gt;
&lt;span id="cb30-11"&gt;&lt;a href="#cb30-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    })&lt;/span&gt;
&lt;span id="cb30-12"&gt;&lt;a href="#cb30-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb30-13"&gt;&lt;a href="#cb30-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;ignoreTrace ::&lt;/span&gt; (&lt;span class="dt"&gt;Trace&lt;/span&gt; lvl &lt;span class="ot"&gt;=&gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb30-14"&gt;&lt;a href="#cb30-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ignoreTrace &lt;span class="ot"&gt;=&lt;/span&gt; withFakeDict (&lt;span class="dt"&gt;Trace_Dict&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb30-15"&gt;&lt;a href="#cb30-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    _trace _ _ x &lt;span class="ot"&gt;=&lt;/span&gt; x&lt;/span&gt;
&lt;span id="cb30-16"&gt;&lt;a href="#cb30-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nice! We just defined a fairly extensible little tracing library in
less than 20 lines of code.&lt;/p&gt;
&lt;p&gt;Here is why this is a good application of fake local instances&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is no reason to manually implement the &lt;code&gt;Trace&lt;/code&gt; type
class, so we were able to hide it completely and fully prevent
incoherence.&lt;/li&gt;
&lt;li&gt;In case we made a mistake or this whole approach is fundamentally
flawed and GHC decides to pick the wrong instance, nothing major breaks.
(You can never be entirely sure with &lt;code&gt;unsafeCoerce&lt;/code&gt; tricks
like this)&lt;/li&gt;
&lt;li&gt;This is really easy to implement, and much less limited than most
alternative approaches (Logging monads/effects, global
&lt;code&gt;IORef&lt;/code&gt;s, …)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now, what did we learn from all of this?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is possible to transfer instances between newtypes.&lt;/li&gt;
&lt;li&gt;This approach can be expanded to allow the inclusion of arbitrary
functions as instance methods.&lt;/li&gt;
&lt;li&gt;All segfaults stemming from non-unsafe functions can be avoided and
it is possible to generate most boilerplate.&lt;/li&gt;
&lt;li&gt;Incoherence, stemming from multiple instances being available at
once, is an issue.&lt;/li&gt;
&lt;li&gt;ImplicitParams can be emulated with local instances.&lt;/li&gt;
&lt;li&gt;A tiny extensible tracing library is a pretty cool application of
local instances.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Does this mean, you should throw all your newtypes out of the window?
No.&lt;/p&gt;
&lt;p&gt;Does this mean, you should use the code from this article in
production? Probably not. You should really know what you’re doing if
you want to use anything in production that is based on
&lt;code&gt;unsafeCoerce&lt;/code&gt;. That said, if you want to try this out for
yourself, the code is available in a &lt;a
href="https://github.com/Innf107/fakedict"&gt;small library on github&lt;/a&gt;,
including &lt;code&gt;trace&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ultimately, I hope that you learned a nice little trick today. You
never know when it might come in handy.&lt;/p&gt;
&lt;aside id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;In this particular example, most boilerplate could be
eliminated by using &lt;code&gt;Sum&lt;/code&gt;’s &lt;code&gt;Num&lt;/code&gt; instance, but in
most real scenarios it’s unfortunately not that simple.&lt;a href="#fnref1"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;There are very good reasons why Haskell doesn’t have
local instances, but we’ll get to that.&lt;a href="#fnref2"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Well… we’ll see about that.&lt;a href="#fnref3"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;I told you, unsafeCoerce was dangerous…&lt;a href="#fnref4"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;&lt;em&gt;safe&lt;/em&gt; here just means that it doesn’t segfault.
We’ll get to other meanings of safe, don’t worry!&lt;a href="#fnref5"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Feel free to &lt;a
href="https://github.com/Innf107/fakedict/tree/main/src/Fakedict/TH.hs"&gt;submit
a pull request&lt;/a&gt; if you would like to write a better implementation&lt;a
href="#fnref6" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;I did not use &lt;code&gt;withFakeDict&lt;/code&gt; here, since
&lt;code&gt;Show&lt;/code&gt; has a few additional methods that we would have had to
implement manually&lt;a href="#fnref7" class="footnote-back"
role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;</description>
</item>
    </channel>
</rss>