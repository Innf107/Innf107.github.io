{"postId":6756242,"headline":"I feel like noone ever mentions a massive advantages of direct-style effects","publishedAt":"2024-07-05T20:15:33.699Z","state":1,"cws":[],"tags":["programming languages","Effects","algebraic effects","PLT","haskell","functional programming"],"blocks":[{"type":"markdown","markdown":{"content":"And that is that effect-polymorphic functions can also be used as pure functions."}},{"type":"markdown","markdown":{"content":"In Haskell, where we use Monads, the universe is essentially split in two: there are pure functions like map, fold, filter and then there are monadic versions of the same functions that are polymorphic over some monad (or Applicative) like mapM/traverse, foldM, filterM/wither."}},{"type":"markdown","markdown":{"content":"This isn't as bad as it sounds since it is still possible to recover the pure variant by instantiating the monad with `Identity`, but this requires some wrapping/unwrapping so in practice there are usually still pure variants defined for every effect-polymorphic function and, crucially, **functions are pure instead of effect-polymorphic by default**."}},{"type":"markdown","markdown":{"content":"With direct style effects, there usually isn't much a a reason *not* to define effect-polymorphic functions unless they actually *have* to be pure, so programmers should pretty much never be limited by libraries not exposing an effectful version of some function and library authors shouldn't even have to think about exposing effect-polymorphic variants."}}],"pinned":false,"commentsLocked":false,"sharesLocked":false,"singlePostPageUrl":"https://cohost.org/prophet/post/6756242-i-feel-like-noone-ev"}