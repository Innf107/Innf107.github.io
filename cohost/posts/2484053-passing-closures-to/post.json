{"postId":2484053,"headline":"Passing closures to programs","publishedAt":"2023-08-15T14:26:17.891Z","state":1,"cws":[],"tags":["polaris","programming","programming languages"],"blocks":[{"type":"markdown","markdown":{"content":"One of the key features of Polaris is that it supports calling other programs as a language construct rather than a function (like Bash, but unlike, say, `os.system` in Python).\nThis sounds like it wouldn't make much of a difference beyond ergonomics, but it actually gives the interpreter the freedom to do a few things that would be impossible to do from inside the language. This is one of those! "}},{"type":"markdown","markdown":{"content":"Some CLI programs accept programs as callbacks that they will run at some point. E.g. `watch`, `entr`. \nUsing these in a bash script means writing the callback to a separate file and passing the name of that file —­ not too painful, but you're already using bash so the bar is pretty low."}},{"type":"markdown","markdown":{"content":"Polaris on the other hand supports, you know, *actual functions*. So wouldn't it be nice if we could just pass one of those to a program call? \nImagine the possibilities if we could write programs like this"}},{"type":"markdown","markdown":{"content":"```\nlet counter = ref 0"}},{"type":"markdown","markdown":{"content":"!watch (\\_ -> {\n    print(counter!)\n    counter := counter! + 1\n    0\n})\n```"}},{"type":"markdown","markdown":{"content":"## How on earth are you going to implement this?\nGreat question! Here is where it gets fun. "}},{"type":"markdown","markdown":{"content":"Every time we pass a function to a program call, the interpreter *actually* creates a shell script in a new temporary directory and passes its path to the program call.\nThis shell script then communicates with the main polaris process through [named pipe files](https://man7.org/linux/man-pages/man3/mkfifo.3.html), sending stdin and receiving stdout. There, the polaris runtime creates a new async task that evaluates the closure with the correct stdin and stdout."}},{"type":"markdown","markdown":{"content":"Importantly, this will *not* work with programs that somehow modify the execution context such as `chroot` or `env`. Maybe it should though? It might be possible to run every IO operation in the child script."}}],"pinned":false,"commentsLocked":false,"sharesLocked":false,"singlePostPageUrl":"https://cohost.org/prophet/post/2484053-passing-closures-to"}