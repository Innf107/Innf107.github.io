{"postId":3011874,"headline":"Trees that Grow","publishedAt":"2023-09-29T21:16:40.089Z","state":1,"cws":[],"tags":["programming languages","trees that grow","compilers","haskell","ocaml","programming language development"],"blocks":[{"type":"markdown","markdown":{"content":"[Trees that Grow](https://www.microsoft.com/en-us/research/uploads/prod/2016/11/trees-that-grow.pdf) is one of my favorite programming patterns for compilers, but I don't think the paper does a great job of explaining it."}},{"type":"markdown","markdown":{"content":"The core idea is pretty simple: many passes in a compiler will want to modify or extend the syntax tree in some way. For example, just after parsing, you'll probably represent all variables with strings, but in the renamer you'll want to replace them with a more efficient name representation. Similarly, you'll probably want to extend many expressions with their types after type checking if you need those for codegen or a language server and if you're lowering to something like GHC Core, you'll probably want to extend your syntax tree with explicit type abstractions / applications.\nEven removing constructors from your AST is reasonable if you desugar some constructor from an earlier stage into other language concepts."}},{"type":"markdown","markdown":{"content":"## So how do you do this in Haskell?"}},{"type":"markdown","markdown":{"content":"Let's say you start of with a syntax tree that looks something like this"}},{"type":"markdown","markdown":{"content":"<pre tabindex=\"0\" style=\"box-sizing: border-box; padding: 0.75rem; margin: 1.25rem -0.75rem; border-radius: 0px; line-height: 1.5; overflow-x: auto; background: rgb(20, 49, 40); color: rgb(187, 238, 219); color-scheme: dark; scrollbar-color: rgb(187, 238, 219) rgb(6, 36, 28);\"><code><span style=\"color: rgb(205, 203, 81);\">data</span> <span style=\"color: rgb(233, 228, 169);\">Expr</span>\n    <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Var</span> <span style=\"color: rgb(233, 228, 169);\">Text</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Lambda</span> <span style=\"color: rgb(233, 228, 169);\">Text</span> <span style=\"color: rgb(233, 228, 169);\">Expr</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">App</span> <span style=\"color: rgb(233, 228, 169);\">Expr</span> <span style=\"color: rgb(233, 228, 169);\">Expr</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Literal</span> <span style=\"color: rgb(233, 228, 169);\">Integer</span></code></pre>"}},{"type":"markdown","markdown":{"content":"### Step 1: Parameterize your AST over the compiler pass it came from"}},{"type":"markdown","markdown":{"content":"I like to use a data kind here, but you could use separate types. Doing so makes things a little less clear but might allow external code like compiler plugins to add its own passes"}},{"type":"markdown","markdown":{"content":"<pre tabindex=\"0\" style=\"box-sizing: border-box; padding: 0.75rem; margin: 1.25rem -0.75rem; border-radius: 0px; line-height: 1.5; overflow-x: auto; background: rgb(20, 49, 40); color: rgb(187, 238, 219); color-scheme: dark; scrollbar-color: rgb(187, 238, 219) rgb(6, 36, 28);\"><code><span style=\"color: rgb(205, 203, 81);\">data</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span> <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">data</span> <span style=\"color: rgb(233, 228, 169);\">Expr</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Var</span> <span style=\"color: rgb(233, 228, 169);\">Text</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Lambda</span> <span style=\"color: rgb(233, 228, 169);\">Text</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">App</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Literal</span> <span style=\"color: rgb(233, 228, 169);\">Integer</span></code></pre>"}},{"type":"markdown","markdown":{"content":"### Step 2: Replace all varying types in your AST with type families parameterized over the pass\nIn our case, the names might vary between passes, so we will replace them with a type family `XName`[^X]"}},{"type":"markdown","markdown":{"content":"<pre tabindex=\"0\" style=\"box-sizing: border-box; padding: 0.75rem; margin: 1.25rem -0.75rem; border-radius: 0px; line-height: 1.5; overflow-x: auto; background: rgb(20, 49, 40); color: rgb(187, 238, 219); color-scheme: dark; scrollbar-color: rgb(187, 238, 219) rgb(6, 36, 28);\"><code><span style=\"color: rgb(205, 203, 81);\">data</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span> <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">data</span> <span style=\"color: rgb(233, 228, 169);\">Expr</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Var</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XName</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Lambda</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XName</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">App</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Literal</span> <span style=\"color: rgb(233, 228, 169);\">Integer</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">type</span> <span>family</span> <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(205, 203, 81);\">where</span>\n    <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span>  <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Text</span>\n    <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">MuchBetterName</span>\n    <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>   <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">MuchBetterName</span></code></pre>"}},{"type":"markdown","markdown":{"content":"If you used separate types rather than a data kind, you would need to use an *open* type family here."}},{"type":"markdown","markdown":{"content":"### Step 3: Add extension fields to existing constructors.\nThe paper recommends adding an extension field to *every* constructor, but I prefer only doing so on demand when necessary. This might break code more often, so if your project is GHC-sized your mileage may vary, but I've found it to be much less hassle in practice."}},{"type":"markdown","markdown":{"content":"The actual extension field is once again given by a type family. To specify that an extension should not be used, you can set the extension field to `()` and to disable a constructor completely, you can just set it to `Void` (the uninhabited type)."}},{"type":"markdown","markdown":{"content":"In our example, we extend variables with their types after typing and let's say the renamer desugars literals to church encoded numbers so we can get rid of the `Literal` constructor afterwards."}},{"type":"markdown","markdown":{"content":"<pre tabindex=\"0\" style=\"box-sizing: border-box; padding: 0.75rem; margin: 1.25rem -0.75rem; border-radius: 0px; line-height: 1.5; overflow-x: auto; background: rgb(20, 49, 40); color: rgb(187, 238, 219); color-scheme: dark; scrollbar-color: rgb(187, 238, 219) rgb(6, 36, 28);\"><code><span style=\"color: rgb(205, 203, 81);\">data</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span> <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">data</span> <span style=\"color: rgb(233, 228, 169);\">Expr</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Var</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XVar</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XName</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Lambda</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XName</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">App</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Literal</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(233, 228, 169);\">Integer</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">type</span> <span>family</span> <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(205, 203, 81);\">where</span>\n    <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span>  <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Text</span>\n    <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">MuchBetterName</span>\n    <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>   <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">MuchBetterName</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">type</span> <span>family</span> <span style=\"color: rgb(233, 228, 169);\">XVar</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(205, 203, 81);\">where</span>\n    <span style=\"color: rgb(233, 228, 169);\">XVar</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span>  <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(233, 228, 169);\">XVar</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(233, 228, 169);\">XVar</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>   <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Type</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">type</span> <span>family</span> <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(205, 203, 81);\">where</span>\n    <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span>  <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Void</span>\n    <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>   <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Void</span></code></pre>"}},{"type":"markdown","markdown":{"content":"### Step 4: Add an extension *constructor*"}},{"type":"markdown","markdown":{"content":"This is what allows us to add additional constructors to the AST. Unlike extension *fields*, this one shouldn't exist at all when it's unused so we're just going to set it to `Void` in that case."}},{"type":"markdown","markdown":{"content":"<pre tabindex=\"0\" style=\"box-sizing: border-box; padding: 0.75rem; margin: 1.25rem -0.75rem; border-radius: 0px; line-height: 1.5; overflow-x: auto; background: rgb(20, 49, 40); color: rgb(187, 238, 219); color-scheme: dark; scrollbar-color: rgb(187, 238, 219) rgb(6, 36, 28);\"><code><span style=\"color: rgb(205, 203, 81);\">data</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span> <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">data</span> <span style=\"color: rgb(233, 228, 169);\">Expr</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Var</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XVar</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XName</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Lambda</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XName</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">App</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Literal</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(233, 228, 169);\">Integer</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">ExprX</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XExpr</span> <span>p</span><span style=\"color: rgb(49, 165, 133);\">)</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">type</span> <span>family</span> <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(205, 203, 81);\">where</span>\n    <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span>  <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Text</span>\n    <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">MuchBetterName</span>\n    <span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>   <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">MuchBetterName</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">type</span> <span>family</span> <span style=\"color: rgb(233, 228, 169);\">XVar</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(205, 203, 81);\">where</span>\n    <span style=\"color: rgb(233, 228, 169);\">XVar</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span>  <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(233, 228, 169);\">XVar</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(233, 228, 169);\">XVar</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>   <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Type</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">type</span> <span>family</span> <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(205, 203, 81);\">where</span>\n    <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span>  <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Void</span>\n    <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>   <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Void</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">type</span> <span>family</span> <span style=\"color: rgb(233, 228, 169);\">XExpr</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span>p</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(233, 228, 169);\">Pass</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(205, 203, 81);\">where</span>\n    <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span>  <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Void</span>\n    <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">Void</span>\n    <span style=\"color: rgb(233, 228, 169);\">XLiteral</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span>   <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">TypedExprExt</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">data</span> <span style=\"color: rgb(233, 228, 169);\">TypedExprExt</span>\n    <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">TypeLambda</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XName</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n    <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">TypeApp</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Expr</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(233, 228, 169);\">Type</span></code></pre>"}},{"type":"markdown","markdown":{"content":"### Step 5: Profit"}},{"type":"markdown","markdown":{"content":"With a tiny syntax tree like this, Trees That Grow might seem like a lot of effort for little gain, but in practice it's really not. In a typical compiler, most constructors will not change between passes so the number of extension families really isn't that large compared to the size of the tree that would need to be duplicated without them."}},{"type":"markdown","markdown":{"content":"Also, doing this allows us to write functions that are polymorphic in the compiler pass. It's even possible to write functions over only a subset of valid expression types (e.g. ones that use `MuchBetterName` for names) by using an equality constraint. For example:"}},{"type":"markdown","markdown":{"content":"<pre tabindex=\"0\" style=\"box-sizing: border-box; padding: 0.75rem; margin: 1.25rem -0.75rem; border-radius: 0px; line-height: 1.5; overflow-x: auto; background: rgb(20, 49, 40); color: rgb(187, 238, 219); color-scheme: dark; scrollbar-color: rgb(187, 238, 219) rgb(6, 36, 28);\"><code><span>f</span> <span style=\"color: rgb(49, 165, 133);\">::</span> <span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">XName</span> <span>p</span> <span style=\"color: rgb(49, 165, 133);\">~</span> <span style=\"color: rgb(233, 228, 169);\">MuchMoreEfficientName</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">=&gt;</span> <span style=\"color: rgb(233, 228, 169);\">Expr</span> <span>p</span> <span style=\"color: rgb(49, 165, 133);\">-&gt;</span> <span style=\"color: rgb(49, 165, 133);\">...</span></code></pre>"}},{"type":"markdown","markdown":{"content":"## How would you do this in OCaml?\nYou... wouldn't. Seriousy, I've tried. It's not pretty. Your first instinct might be that this would be a great use of functors and you wouldn't be alone[^blog]. But it's not. The issue is mutual recursion.\nSay you want to annotate every variable with its type. If you tried to do this with modules, your attempt would probably look something like this"}},{"type":"markdown","markdown":{"content":" <pre tabindex=\"0\" style=\"box-sizing: border-box; padding: 0.75rem; margin: 1.25rem -0.75rem; border-radius: 0px; line-height: 1.5; overflow-x: auto; background: rgb(20, 49, 40); color: rgb(187, 238, 219); color-scheme: dark; scrollbar-color: rgb(187, 238, 219) rgb(6, 36, 28);\"><code><span style=\"color: rgb(205, 203, 81);\">module</span> <span style=\"color: rgb(233, 228, 169);\">AST</span><span style=\"color: rgb(49, 165, 133);\">(</span><span style=\"color: rgb(233, 228, 169);\">Ext</span> <span style=\"color: rgb(49, 165, 133);\">:</span> <span>sig</span> \n    <span style=\"color: rgb(205, 203, 81);\">type</span> <span>var_ext</span>\n<span>end</span><span style=\"color: rgb(49, 165, 133);\">)</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span>struct</span> \n    <span style=\"color: rgb(205, 203, 81);\">type</span> <span>expr</span> <span style=\"color: rgb(49, 165, 133);\">=</span>\n        <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(49, 165, 133);\">...</span>\n        <span style=\"color: rgb(49, 165, 133);\">|</span> <span style=\"color: rgb(233, 228, 169);\">Var</span> <span style=\"color: rgb(205, 203, 81);\">of</span> <span>var_ext</span> <span style=\"color: rgb(49, 165, 133);\">*</span> <span>name</span>"}},{"type":"markdown","markdown":{"content":"    <span style=\"color: rgb(205, 203, 81);\">type</span> <span>type_</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(49, 165, 133);\">...</span>\n<span>end</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(205, 203, 81);\">module</span> <span style=\"color: rgb(233, 228, 169);\">Parsed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">AST</span><span style=\"color: rgb(49, 165, 133);\">(</span><span>struct</span> <span style=\"color: rgb(205, 203, 81);\">type</span> <span>var_ext</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span>unit</span> <span>end</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n<span style=\"color: rgb(205, 203, 81);\">module</span> <span style=\"color: rgb(233, 228, 169);\">Renamed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">AST</span><span style=\"color: rgb(49, 165, 133);\">(</span><span>struct</span> <span style=\"color: rgb(205, 203, 81);\">type</span> <span>var_ext</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span>unit</span> <span>end</span><span style=\"color: rgb(49, 165, 133);\">)</span>\n<span style=\"color: rgb(205, 203, 81);\">module</span> <span style=\"color: rgb(233, 228, 169);\">Typed</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span style=\"color: rgb(233, 228, 169);\">AST</span><span style=\"color: rgb(49, 165, 133);\">(</span><span>struct</span> <span style=\"color: rgb(205, 203, 81);\">type</span> <span>var_ext</span> <span style=\"color: rgb(49, 165, 133);\">=</span> <span>Typed<span style=\"color: rgb(49, 165, 133);\">.</span>type_</span> <span>end</span><span style=\"color: rgb(49, 165, 133);\">)</span></code></pre>"}},{"type":"markdown","markdown":{"content":"Except that doesn't work, because modules don't let you tie the knot like that and include a module in the argument to the functor application of its own definition. Mutually recursive modules can get close, but those don't work without explicit module types so they're not an option either if you want to avoid duplicating the syntax tree for every single pass."}},{"type":"markdown","markdown":{"content":"Trying to get clever with explicit staging might even work for this example, but will break donw once you try to include an expression in an extension field for an expression."}},{"type":"markdown","markdown":{"content":"In Polaris, I used a (pretty cursed) PPX rewriter that syntactically inlines a functor application to allow extension fields to reference other types defined in the same pass."}},{"type":"markdown","markdown":{"content":"[^X]: The `X` stands for \"extension\" but if you want to read it as \"EXTREME\" that's also fine."}},{"type":"markdown","markdown":{"content":"[^blog]: I *almost* wrote a blog post about this approach once. That would have been very embarassing in retrospect..."}}],"pinned":false,"commentsLocked":false,"sharesLocked":false,"singlePostPageUrl":"https://cohost.org/prophet/post/3011874-trees-that-grow"}