{"postId":4979906,"headline":"I don't think people appreciate the tradeoffs they're making with algebraic data types","publishedAt":"2024-03-09T13:13:42.525Z","state":1,"cws":[],"tags":["programming","functional programming","haskell","programming languages","algebraic data types"],"blocks":[{"type":"markdown","markdown":{"content":"Specifically, people don't appreciate the commitment they're making by exposing an ADT's implementation.\nThis commitment is\n> Whenever this implementation changes in any way, I want **every usage that matches on it to break**"}},{"type":"markdown","markdown":{"content":"That's a lot!\nThis isn't to say that ADTs with exposed implementations are *bad*. They're perfectly fine if you either don't care (the definition of `Maybe` is not going to change any time soon) or if breaking downstream code is something you *want*. E.g. if you're writing a compiler, you want every function that consumes the AST to break until it handles the newly added cases."}},{"type":"markdown","markdown":{"content":"But it means that ADTs are just not a good choice if want to be able to add new cases or change the implementation details of existing ones in the future."}},{"type":"markdown","markdown":{"content":"And I wish functional programmers recognized this! It already starts with the most basic examples we give people."}},{"type":"markdown","markdown":{"content":"<pre tabindex=\"0\" style=\"box-sizing: border-box; padding: 0.5rem; margin: 1.25rem 0px 0px; border-radius: 0.25rem 0.25rem 0px 0px; line-height: 1.5; overflow-x: auto; color-scheme: dark; background: rgb(40, 42, 54); color: rgb(248, 248, 242); scrollbar-color: rgb(248, 248, 242) rgb(25, 26, 33);\"><code><span style=\"color: rgb(255, 121, 198);\">data</span> <span style=\"color: rgb(189, 147, 249);\">Shape</span>\n  <span style=\"color: rgb(255, 121, 198);\">=</span> <span style=\"color: rgb(189, 147, 249);\">Circle</span> <span style=\"color: rgb(189, 147, 249);\">Float</span> <span style=\"color: rgb(189, 147, 249);\">Float</span> <span style=\"color: rgb(189, 147, 249);\">Float</span>\n  <span style=\"color: rgb(255, 121, 198);\">|</span> <span style=\"color: rgb(189, 147, 249);\">Rectangle</span> <span style=\"color: rgb(189, 147, 249);\">Float</span> <span style=\"color: rgb(189, 147, 249);\">Float</span> <span style=\"color: rgb(189, 147, 249);\">Float</span> <span style=\"color: rgb(189, 147, 249);\">Float</span>"}},{"type":"markdown","markdown":{"content":"<span>surface</span> <span style=\"color: rgb(255, 121, 198);\">::</span> <span style=\"color: rgb(189, 147, 249);\">Shape</span> <span style=\"color: rgb(255, 121, 198);\">-&gt;</span> <span style=\"color: rgb(189, 147, 249);\">Float</span>\n<span>surface</span> <span style=\"color: rgb(248, 248, 242);\">(</span><span style=\"color: rgb(189, 147, 249);\">Circle</span> <span>_</span> <span>_</span> <span>r</span><span style=\"color: rgb(248, 248, 242);\">)</span> <span style=\"color: rgb(255, 121, 198);\">=</span> <span style=\"color: rgb(139, 233, 253);\">pi</span> <span style=\"color: rgb(255, 121, 198);\">*</span> <span>r</span> <span style=\"color: rgb(255, 121, 198);\">^</span> <span style=\"color: rgb(189, 147, 249);\">2</span>\n<span>surface</span> <span style=\"color: rgb(248, 248, 242);\">(</span><span style=\"color: rgb(189, 147, 249);\">Rectangle</span> <span>x1</span> <span>y1</span> <span>x2</span> <span>y2</span><span style=\"color: rgb(248, 248, 242);\">)</span> <span style=\"color: rgb(255, 121, 198);\">=</span> <span style=\"color: rgb(248, 248, 242);\">(</span><span style=\"color: rgb(139, 233, 253);\">abs</span> <span style=\"color: rgb(255, 121, 198);\">$</span> <span>x2</span> <span style=\"color: rgb(255, 121, 198);\">-</span> <span>x1</span><span style=\"color: rgb(248, 248, 242);\">)</span> <span style=\"color: rgb(255, 121, 198);\">*</span> <span style=\"color: rgb(248, 248, 242);\">(</span><span style=\"color: rgb(139, 233, 253);\">abs</span> <span style=\"color: rgb(255, 121, 198);\">$</span> <span>y2</span> <span style=\"color: rgb(255, 121, 198);\">-</span> <span>y1</span><span style=\"color: rgb(248, 248, 242);\">)</span></code></pre><div style=\"margin-bottom: 1.25rem; padding: 0.25rem 0.5rem; font-size: smaller; text-align: right; border-radius: 0px 0px 0.25rem 0.25rem; background: rgb(25, 26, 33); color: rgb(248, 248, 242);\">syntax highlighting by <a href=\"https://codehost.wavebeem.com\">codehost</a></div>"}},{"type":"markdown","markdown":{"content":"This particular one is from [Learn You A Haskell](https://learnyouahaskell.com/making-our-own-types-and-typeclasses#algebraic-data-types), but there are many similar ones in many other beginner resources."}},{"type":"markdown","markdown":{"content":"This is a *terrible* way to model a shape! Your program is almost certainly going to want to handle more shapes than *just* circles and rectangles at some point, but with this definition you can't add more without breaking every consumer!"}},{"type":"markdown","markdown":{"content":"And it's not like Haskell doesn't have the tools to deal with this! This case could absolutely be defined more reasonably like this."}},{"type":"markdown","markdown":{"content":"<pre tabindex=\"0\" style=\"box-sizing: border-box; padding: 0.5rem; margin: 1.25rem 0px 0px; border-radius: 0.25rem 0.25rem 0px 0px; line-height: 1.5; overflow-x: auto; color-scheme: dark; background: rgb(40, 42, 54); color: rgb(248, 248, 242); scrollbar-color: rgb(248, 248, 242) rgb(25, 26, 33);\"><code><span style=\"color: rgb(255, 121, 198);\">data</span> <span style=\"color: rgb(189, 147, 249);\">Circle</span> <span style=\"color: rgb(255, 121, 198);\">=</span> <span style=\"color: rgb(189, 147, 249);\">Circle</span> <span style=\"color: rgb(189, 147, 249);\">Float</span> <span style=\"color: rgb(189, 147, 249);\">Float</span> <span style=\"color: rgb(189, 147, 249);\">Float</span>\n<span style=\"color: rgb(255, 121, 198);\">data</span> <span style=\"color: rgb(189, 147, 249);\">Rectangle</span> <span style=\"color: rgb(255, 121, 198);\">=</span> <span style=\"color: rgb(189, 147, 249);\">Rectangle</span> <span style=\"color: rgb(189, 147, 249);\">Float</span> <span style=\"color: rgb(189, 147, 249);\">Float</span> <span style=\"color: rgb(189, 147, 249);\">Float</span> <span style=\"color: rgb(189, 147, 249);\">Float</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(255, 121, 198);\">class</span> <span style=\"color: rgb(189, 147, 249);\">Surface</span> <span>shape</span> <span style=\"color: rgb(255, 121, 198);\">where</span>\n    <span>surface</span> <span style=\"color: rgb(255, 121, 198);\">::</span> <span>shape</span> <span style=\"color: rgb(255, 121, 198);\">-&gt;</span> <span style=\"color: rgb(189, 147, 249);\">Float</span>"}},{"type":"markdown","markdown":{"content":"<span style=\"color: rgb(255, 121, 198);\">instance</span> <span style=\"color: rgb(189, 147, 249);\">Surface</span> <span style=\"color: rgb(189, 147, 249);\">Circle</span> <span style=\"color: rgb(255, 121, 198);\">where</span>\n    <span>surface</span> <span style=\"color: rgb(248, 248, 242);\">(</span><span style=\"color: rgb(189, 147, 249);\">Circle</span> <span>_</span> <span>_</span> <span>r</span><span style=\"color: rgb(248, 248, 242);\">)</span> <span style=\"color: rgb(255, 121, 198);\">=</span> <span style=\"color: rgb(139, 233, 253);\">pi</span> <span style=\"color: rgb(255, 121, 198);\">*</span> <span>r</span> <span style=\"color: rgb(255, 121, 198);\">^</span> <span style=\"color: rgb(189, 147, 249);\">2</span>\n<span style=\"color: rgb(255, 121, 198);\">instance</span> <span style=\"color: rgb(189, 147, 249);\">Surface</span> <span style=\"color: rgb(189, 147, 249);\">Rectangle</span> <span style=\"color: rgb(255, 121, 198);\">where</span>\n    <span>surface</span> <span style=\"color: rgb(248, 248, 242);\">(</span><span style=\"color: rgb(189, 147, 249);\">Rectangle</span> <span>x1</span> <span>y1</span> <span>x2</span> <span>y2</span><span style=\"color: rgb(248, 248, 242);\">)</span> <span style=\"color: rgb(255, 121, 198);\">=</span> <span style=\"color: rgb(248, 248, 242);\">(</span><span style=\"color: rgb(139, 233, 253);\">abs</span> <span style=\"color: rgb(255, 121, 198);\">$</span> <span>x2</span> <span style=\"color: rgb(255, 121, 198);\">-</span> <span>x1</span><span style=\"color: rgb(248, 248, 242);\">)</span> <span style=\"color: rgb(255, 121, 198);\">*</span> <span style=\"color: rgb(248, 248, 242);\">(</span><span style=\"color: rgb(139, 233, 253);\">abs</span> <span style=\"color: rgb(255, 121, 198);\">$</span> <span>y2</span> <span style=\"color: rgb(255, 121, 198);\">-</span> <span>y1</span><span style=\"color: rgb(248, 248, 242);\">)</span></code></pre><div style=\"margin-bottom: 1.25rem; padding: 0.25rem 0.5rem; font-size: smaller; text-align: right; border-radius: 0px 0px 0.25rem 0.25rem; background: rgb(25, 26, 33); color: rgb(248, 248, 242);\">syntax highlighting by <a href=\"https://codehost.wavebeem.com\">codehost</a></div>"}},{"type":"markdown","markdown":{"content":"If this reminds you of object oriented programming, that's because the OOP solution is just plain better here and I wish functional programmers would stop rejecting anything that reminds them of it."}},{"type":"markdown","markdown":{"content":"Algebraic data types are great but they're not a panacea."}}],"pinned":false,"commentsLocked":false,"sharesLocked":false,"singlePostPageUrl":"https://cohost.org/prophet/post/4979906-i-don-t-think-people"}